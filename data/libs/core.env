#!/usr/bin/env bash
#
# Basic utility
#
	init.msg() { $PRINTF '%s\n' "$1" ;}
#
# First the most important basics
#
	if [[ -z "${UID:-${EUID}}" ]]
	then	# It's empty, lets get an id otherwise
			# This should fail actualy, but trying anyway.
			# I mean, it should never ever get to here....
			# And if these variables are empty, they should not be readonly to cause an error
			init.msg "$SWARM_MSG_INIT_NO_ID : uid=$UID euid=$EUID \nid=$(${ID:-\id})"
			UID=$(${ID:-\id -u})
			EUID=$(${ID:-\id -u})
	fi
#
# Finalize internal paths
#
	declare isSourced=false
	# Evalute home dir
	HOME="${HOME:-$($ECHO ~$USER)}"
	# If its still empty, use 'cd' default behaviour to return to the users homedir if invoked without args
	[ -z "$HOME" ] && HOME=$(cd || return 1;$PWD_EXEC)
	# Last attempt to check for missing '$HOME'
	if [[ -z "$HOME" ]] || [[ ! -d "$HOME" ]]
	then	# HOME is empty, if UID is empty too, assume machine is still booting
		if [[ 0 -eq "${UID:-0}" ]]
		then	# Its 'root', check both even though /root is not standard and might not be available
			known="/root /admin /usr/etc /etc /"
			for k in $known $($AWK  -v FS=":" '/^root/ {print $6}' /etc/passwd 2>/dev/zero)
			do 	[[ -d "$k" ]] && HOME="$k" && export HOME && break
			done
		else	# Its 'normal' user
			known="/home /Users  /users /Home"
			for k in $known
			do 	[[ -d "$k" ]] && HOME="$k" && export HOME && break
			done
		fi
		[[ -z "$HOME" ]] && init.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND : uid = $UID : $known ($k)"
	else
		# So, HOME is set, lets see if it exists
		if [[ -d "$HOME" ]]
		then	# It does exit, 'save' it
				export HOME
		else	# Nope, lets use fallback settings then...
				[[ -z "$SWARMRC" ]] && init.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND"
				if [[ ! -z "$SWARMRC" ]]
				then	tmp_val=${SWARMRC##*/}
						HOME=${SWARMRC/$tmp_val}
						[[ ! -d "$HOME" ]] && \
							HOME="" && \
							init.msg "$SWARM_MSG_INIT_SWARMRC_PROV_NOT_FOUND" && \
							unset SWARMRC
				fi
				export HOME=${HOME:-$PWD}
		fi
	fi

	# Just in case this doesnt work, we could preset this variable
	# SWARMRC=../xy ./your-script.sh [args]
		SWARMRC=${SWARMRC:-$HOME/.swarmrc}

	# Lets check if we can take the short cut:
		[[ -f "${SWARMRC}" ]] && \
			source "${SWARMRC}" && isSourced=true && \
			isSWARMfirstTime=false

	# Since we still know wether or not the SWARMRC was written already
	# Lets to a general read/write check
		${TOUCH:-\touch} "$SWARMRC" || isRO=true

	# Now, act accordingly
	if $isSWARMfirstTime
	then	# Be gentle, its the first time
			# I'd need to read into ram-partitions
			#if $isRO
			#then	# System is ReadOnly, no config files can be written
			#		$PRINTF "TODO Act accordingly"
			#fi
	#
	#   Make it work cross-plattform
	#   You thought getting the SWARM dir was hard?
	#   Have fun reading this! :p
	#

	#
	# Prepare LOG and TMP files
	# Now that we have defind where one's $HOME is....
	#
		if [[ 0 -eq ${UID:-${EUID:-0}} ]]
		then	# It's ROOT
				SWARM_LOG_DIR="/var/log"
				SWARM_TMP_DIR="/var/tmp"
		else	# It's a user, make sure we save to the right place
				# For example wether we're in a X-session or on a TTY
				declare tmp_worker="${XDG_CONFIG_DIR:-$HOME/.config}"
				SWARM_USER_CONFIG="${SWARM_USER_CONFIG:-$tmp_worker/swarm}"
				# Not all mkdirs support creating subdirs...
				[[ -d "$tmp_worker" ]] || $MKDIR "$tmp_worker"
				[[ -d "$SWARM_USER_CONFIG" ]] || $MKDIR "$SWARM_USER_CONFIG"
				unset tmp_worker
				# Actualy set the required variables
				SWARM_LOG_DIR="${SWARM_USER_CONFIG}/logs"
				SWARM_TMP_DIR="${SWARM_USER_CONFIG}/tmp"
		fi
		for thisD in $SWARM_LOG_DIR $SWARM_TMP_DIR
		do
			[[ -d "$thisD" ]] || $MKDIR "$thisD"
		done
		SWARM_LOG="${SWARM_LOG_DIR}/swarm-all-internals.log"
		SWARM_TMP="${SWARM_TMP_DIR}/swarm-${SWARM_CODE}.tmp"
		#$TOUCH "$SWARM_TMP" ## No actual need to create an empty tempfile
	fi
#
# Prepare basic utility functions
#
	init.log() { ${isRO} && return ; [ -f "$SWARM_LOG" ] || ( $TOUCH "$SWARM_LOG" && >"$SWARM_LOG") ; init.msg "$DATE_TIME_LOG SWARM :: $1" >> "$SWARM_LOG";}
	init.log.msg() { init.msg "$1"; ! ${isRO} && init.log "$1";}
	init.log.check() {
	# Checks for log path and logfile
	# Creates if required and prints date and or divider line
		local RET
		if [[ ! -f "$SWARM_LOG" ]]
		then
			# Make sure path exists
			[[ ! -d "$SWARM_LOG_DIR" ]] && $MKDIR "$SWARM_LOG_DIR"
			! $TOUCH "$SWARM_LOG" && init.log.msg "${SWARM_MSG_INIT_LOG_FAIL} -> $SWARM_LOG @ uid:${UID:-$EUID}"
		fi
		# If todays date was not found, write it
		if $GREP "$DATE_TODAY" "$SWARM_LOG" >/dev/null
		then	# Print a visual divider
				init.log " -------------------"
				RET=$?
		else	# Date is missing, print that instead
				! ${isRO} && init.msg "$DATE_TODAY" >> "$SWARM_LOG"
				RET=$?
		fi

		# Exit function
		return $RET
	}
#
# Make sure we can differ the date in the log,
# if this fails, no write access, RO?
#
	# Only check log if loging is enabled (default:true)
	${doLog:-true} && init.log.check && isRO=false || isRO=true
#
# Sometimes all that is needed,
# is a propper Clean Up
#
	swarm.cleanup() { #
	# Clears all known variables and sub routines on terminal exit from memory
	# This is for security and proper coding alike
		unset -v ${!USER_*}		# Shelcheck, this fails if I use quotes as suggested
		local stodo="cleanup color.bg color.fg color.list error init.theme lang.count lang.list lang.load print.bold print.border print.goto print.text print.underline sanity.coreutils sanity.env sanity.userconfig sanity.userconfig.write theme.list theme.update eu.function.list eu.function.show"

		# Clear unused background processes
		for p in ${SWARM_PID_USED}
		do
			kill -s SIGKILL "$p"
			SWARM_PID_USED=${SWARM_PID_USED/$p}
		done

		# Delete files
		! $isRO && \
			[[ -f "$SWARM_TMP" ]] && $RM "$SWARM_TMP"

		# Keep this one alive : Save
		local otmp="${SWARM_INSTALLED_DIR}"
		unset -v ${!SWARM_*}
		# Keep this one alive : Restore
		export SWARM_INSTALLED_DIR="$otmp"
		unset CURL WGET ECHO PRINTF TPUT PWD_EXEC HOSTNAME_EXEC SUDO AWK GREP SUDO SU LS MKDIR RM RMDIR WHICH TOUCH WHOAMI

		# Clean up swarm functions
		for todo in $stodo
		do
			eval unset -f swarm."$todo"
		done

		# Clean up other functions
		for todo in init.msg init.log init.log.msg init.log.check init.countdown cfg.list. cfg.get. cfg.set
		do
			eval unset -f "$todo"
		done

		#traps_restore
	}
#
# Error handling
#

	swarm.error() { # CALLER SCRIPT FUNCNAME LINENO [CONTENT]
	# Prints an error message and exits
	#
		caller="\$1" script="\$2" funcname="\$3" lineno="\$4"
		shift 4 #2 #4

		content=($($ECHO "\${@}"))
		$PRINTF "\n"
		# The eval is required for the function to work after export
		eval $PRINTF '\t%s:\t%s\n' \\
			"Callerscript" "\$caller" \\
			"Scriptname" "\$script" \\
			"Functionname" "\$funcname :: \$FUNCNAME" \\
			"Linenumber" "\$lineno :: \$LINENO"
		for cont in "\${content[@]}";do
			$PRINTF '\t* %s\n' "\$cont"
		done
		# Original
		#trap - HUP INT QUIT ABRT ALRM TERM EXIT
		# Neu
		swarm.cleanup
		traps_restore
		exit 1
	}
	swarm.protect() { # ARGS
	# Searches for injection subjects
	# Returns true if it finds some
		typeset arg ac=0
		local fname="$1" ; shift
		for arg do
		ac="$((ac+=1))"
		case "$arg" in
		(*[';Â´|<&>']*|*':('*|*':-'*)
			$PRINTF "%s\n" "${SWARM_MSG_INIT_INJECTION:-Aborting, injection detected!} arg\${ac}=\$arg $fname"
			read
			return 0
		;;
		esac
		done
		return 1
	}
	function swarm.help.screen() { # "$SWARM_MSG_HELP_???"
	# Simply shows the help screen
	#
		swarm.protect "$FUNCNAME" "${@}" && exit 1
		cat <<-HELP_SCREEN
	${1}
	HELP_SCREEN
	}
#
# Traps & Error messages
#
	traps_save() { saved_traps="$(trap)" ; export saved_traps;}
	traps_restore() { eval \$saved_traps;}
	export -f traps_save traps_restore
	export -f swarm.error swarm.cleanup
	traps_save
	# Start my own traps....
	trap "swarm.error \${CALLER:-\$0} \$0 \$FUNCNAME \$LINENO '\$($ECHO -E \${@})'" ABRT ALRM QUIT TERM INT STOP HUP SEGV CONT PROF BUS SYS FPE
	trap "swarm.cleanup" ABRT QUIT TERM KILL HUP ALRM INT STOP EXIT
