#!/usr/bin/env bash
##############################################
# SWARM = Shell Wrapper and Runtime Modifier #
# Author:	Simon Arjuna Erat (sea)	     #
# Copyleft:	1995-2020		     #
# Created:	2020.01.18		     #
# Changed:	2020.04.19	 	     #
# Build:	20			     #
##############################################
#
#	SWARM is the successor of TUI (Text User Interace) 
#	It is an interface between script authors and end users.
#	In doing so, the scripts you write, 
#	will appear application-like to an end user.
#
#	This file is to be called from your script like eiter one of:
#	source ./runtime
#	source ./SWARM/runtime
#
#	To get started writing scripts, call this file like eiter one of:
#	./runtime help
#	./runtime manual
#	./runtime docs
#
#	To change settings, you can use eiter one of:
#	./runtime config user
#	swarm.userconfig.edit
#	edit "$HOME/.swarmrc"
#
##############################################
# Requirements:
# * BASH 5.0+
# * GNU Coreutils
# * 
#
# Speed increase:
# * Make sure '$HOME' is set and exists for all shell login accounts.
# * Preset SWARMDIR=/path/to/SWARM
#
# RAMDISK
# As root you can force the use of a RAMDISK
# for configuration, log- and possible tempfiles.
# If you should enounter a RO-system, logs and
# config files will be disabled, unless you:
# * Preset SWARM_RAMDISK=true
# * Optionaly, you may pass SWARM_RAMDISK_DIR=/path/to/mountpoint
##############################################
#
# Core Public Variables
#
	# SWARM
	#shopt -i
	#set -n
	#shopt -o huponexit globstar
	
	unset SWARM[@] ${!SWARM_DIR_*} IFS >/dev/zero
	declare -A SWARM
	# isSWARMfirstTime will be set to false if SWARMRC (~/.swarmrc) is found
	declare isSWARMfirstTime=true
	# hasCOLUMNS is for internal use only
	[[ -n "$COLUMNS" ]] && \
		export hasCOLUMNS=true || \
		export hasCOLUMNS=false
	#echo $hasCOLUMNS;exit
	SWARM[VERSION]=0.4
	SWARM[BUILD]=20
	SWARM[AUTHOR]="Simon Arjuna Erat (sea)"
	SWARM[GIT]="http://github.com/sri-arjuna/swarm"
	SWARM[LICENSE]="LGPL"
	# This is default 'highlighted' MACHINE or ROOT display
	# Non-root users (if existing) have very hardcoded 'default-blue' (fallback) theme
	SWARM[THEME]="default-red"
	SWARM[ROOTDIR]=""
	# Language must be pre-set up until the basic language file was loaded
	SWARM[LANG]="en_GB"
	SWARM_CODE=$$
#
# Set first time default
#
#	This is just ment as failsafe if PATH is not set
#	to get the most elementary basics on/of most systems
	PATH="${PATH:-/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$BINDIR:$SBINDIR:$OS_DIR_BIN:$OS_DIR_SBIN}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$BINDIR:$SBINDIR:$OS_DIR_BIN:$OS_DIR_SBIN"
	# Most basic commands ; do not change (But pre-set these variables in the shell for first use)!
	# This WILL be overwritten by the SWARMRC (~/.swarmrc)
	export PRINTF=${PRINTF:-\printf}
	export ECHO="swarm.util.echo"		# Defined in core.utils
	export AWK=${AWK:-\gawk}
	export GREP=${GREP:-\grep}
	export SED=${SED:-\sed}
	export WHICH="swarm.util.which"	# Defined in core.utils
	export LS=${LS:-\ls}
	export PWD_EXEC=${PWD_EXEC:-\pwd}
	export DATE=${DATE:-\date}
	export MKDIR="swarm.util.mkdir"	# Defined in core.utils
	export TOUCH=${TOUCH:-\touch}
	export PWD_EXEC=${PWD_EXEC:-\pwd}
	export TPUT="${TPUT:-tput}"

	export SU=${SU:-\su}
	export SUDO=${SUDO:-\sudo}
	export ID=${ID:-\id}
	export WHOAMI=${WHOAMI:-\whoami}
	export SORT=${SORT:-\sort}		# NOT a GNU coreutil
	export LS=${LS:-\ls}
	export RM=${RM:-\rm}
	export RMDIR=${RMDIR:-\rmdir}
	export FIND=${FIND:-\find}
#
# Some other things
#
	# Need to get these updating them self upon call
	# Use these to set the date variable: `
	DATE_TODAY="$DATE +%F"
	DATE_TIME="$DATE +%T"
	DATE_TIME_LOG="$DATE +%T.%s"
#
# Get proper SWARM root dir
#
	# If no SWARMDIR is provided, it is used in runtime as designed
	# However, 'SWARMDIR=$PWD/SWARM source SWARM/runtime' could be used as a speedbooster,
	# as it bypasses the multiple physical read attempts
	# SWARMDIR - MUST - be provided if you intend to store  
	# the files in a dir not named SWARM
	if [[ "x" == "x$SWARMDIR" ]]
	then
		# Find the path that holds this script
		# Evaluate best chance for the dirs
		for tmp in $0 ${PWD:-$($PWD_EXEC)} .. ${PWD:-$($PWD_EXEC)}/..
		do
			if [[ "SWARM" == "${tmp##*/}" ]]
			then	# We're in it already
				# Usualy debug or tryout mode
				SWARM[ROOTDIR]="$tmp"
				unset tmp
				break
			fi

			if [[ -d "${tmp}/SWARM" ]]
			then	# It's a sub dir
				# As it should be called
				SWARM[ROOTDIR]="$tmp/SWARM"
				unset tmp
				break
			fi
		done
		# Should not reach this point
		# Other than while debug testing
		[[ -f ./runtime ]] && SWARM[ROOTDIR]="${PWD}"
		unset tmp
	else
		# Or optionaly, use the 'install' method
		# Verify the location
		if [[ -f "${SWARMDIR}/runtime" ]]
		then	# Assign the variable
			SWARM[ROOTDIR]="$SWARMDIR"
		else	# This is the only hardcoded 'english only' message
			$PRINTF '%s\n' "Fatal, provided SWARMDIR=$SWARMDIR dir not found - assumed: \"${SWARM[ROOTDIR]}\" and you are in ${PWD:-$(${PWD_EXEC})}."
			sleep 3
			return 1
		fi
	fi
#
# SWARM_DIR_* for proper re-use
# source this file and type: SWARM_DIR_<hit tabulator>
#
	SWARM_DIR_ROOT=${SWARM[ROOTDIR]}
	SWARM_DIR_DOCS="${SWARM_DIR_ROOT}/docs"
	SWARM_DIR_DATA="${SWARM_DIR_ROOT}/data"
	SWARM_DIR_CONF="${SWARM_DIR_DATA}/conf"
	SWARM_DIR_LIBS="${SWARM_DIR_DATA}/libs"
	SWARM_DIR_LANG="${SWARM_DIR_DATA}/lang"
	SWARM_DIR_THEMES="${SWARM_DIR_DATA}/themes"
	SWARM_DIR_TEMPLATES="${SWARM_DIR_DATA}/templates"
#
# Load english strings for overall coverage for error messages.
#
	source "$SWARM_DIR_LANG/${SWARM[LANG]}/core.conf" ; $PRINTF "."
	source "$SWARM_DIR_LANG/${SWARM[LANG]}/help.conf" ; $PRINTF "."
#
# Load SWARM settings, core and sanity functions
#
	declare tmp_swarm_loading="" \
			tmp_len=0 \
			tmp_empty=""

	for thisCFG in "${SWARM_DIR_CONF}"/* "${SWARM_DIR_LIBS}"/core.env #{utils,sanity}
	do
		source "$thisCFG"
		$PRINTF "."
	done
#
# SWARM Environment checks
#
	
	for this in "${SWARM_DIR_LIBS}"/*
	do
		# Skip if core.utils or core.sanity
		#( [[ "$this" == "$SWARM_DIR_LIBS/core.utils" ]] || [[ "$this" == "$SWARM_DIR_LIBS/core.sanity" ]] ) && continue
		[[ "$this" == "$SWARM_DIR_LIBS/core.env" ]] && continue
		# Special handling for slow-mode
		if ${doSlowLoading:-false}
		then
			# This is off by default because nowadays it's too fast to see the regular way
			# Only recomended with numbers between 0.5 to 2 for application-like scripts
			# To have a 'cool intro'
			$PRINTF '\r%s' "$this"
			[[ $tmp_len -lt ${#this} ]] && \
					tmp_len=${#this} && \
					tmp_empty=$($PRINTF '%*s' $COLUMNS)
			sleep ${SWARM_INTERVALL_SLOW_LOADING:-0.3}
			$PRINTF  "\r$tmp_empty"
		fi

		# Minimalistic output
		tmp_swarm_loading="${tmp_swarm_loading}."
		if [[ ! "${this:0:2}" == "\.[\.]" ]]
		then	#
			if source "$this" 
			then	# All good
				$PRINTF '\r%s' "${tmp_swarm_loading}"
				 ${doLogExt} && \
				 	init.msg.log "$SWARM_MSG_INIT_FILE_FOUND $this"
			else	# Not good
				 ${doLogExt} &&  \
					 init.log "$SWARM_MSG_INIT_FILE_MISSING $this"
			fi
		else
			$PRINTF '%s\n' "$SWARM_MSG_INIT_FILE_MISSING $this"
		fi
	done
	unset tmp_swarm_loading \
			tmp_len \
			tmp_empty \
			this
#
# Load the users functions now
# if he has some that is
#
	if [[ -d "$SWARM_USER_CONFIG" ]]
	then
		# Create the dir if not existing yet (first time)
		[[ -d "$SWARM_USER_LIBS" ]] || $MKDIR "$SWARM_USER_LIBS"
		# Parse and source User Files
		for uf in "${SWARM_USER_LIBS}/"*
		do
			[[ ! -d "$uf" ]] && [[ -f "$uf" ]] && source "$uf" && $PRINTF "."
		done
	fi
#
# Starting SWARM now
#
	source "$SWARMRC"
	[[ -z "$LC_ALL" ]] && \
		swarm.update.lang && \
		swarm.update.lang.status
	swarm.init.theme
	swarm.update.geometry
#
# Initiate Interface : Runtime Executed
#
	if [[ "./runtime" = "${0##/}" ]] || [[ "runtime" = "${0##/}" ]]
	then	# First time caller or arguments
		if [[ -z "$1" ]]
		then	# First Time // No arguments
			header 	--default
			title	"$SWARM_MSG_WELCOME_TITLE"
			printe	"$SWARM_MSG_WELCOME_INFOLINE1"
			printe	"$SWARM_MSG_WELCOME_INFOLINE2"
			title	"" # Separator
			$ECHO "$SWARM_MSG_WELCOME_CONTENT" | printe -2 -- # "TODO: Visuals, then explain, configure and stuff..."
			#status $? "one"
			
		else	# Has arguments, lets parse
			case "$1" in
			"basic")
				shift
				swarm.eu.show.basics
				;;
			"config")
				shift
				swarm.eu.show.config
				;;
			"help")
				shift
				# Lets show a basic menu
				swarm.eu.help.menu "${@}"
				;;
			"tarball")
				(
					cd "${SWARM_DIR_ROOT}/.."
					tar -acf "$HOME/swarm-${SWARM[BUILD]}.tar.gz" "${SWARM_DIR_ROOT##*/}"
				)
				;;
			"tar")
				(
					cd "${SWARM_DIR_ROOT}/.."
					tar -acf "$HOME/swarm-${SWARM[BUILD]}-small.tar.gz" --exclude ".git" "${SWARM_DIR_ROOT##*/}"
				)
				;;
			*)	# Exit the loop
				break
					;;
			esac
		fi
	fi
#
# Develeoper testings
#
	if false && [[ "bash" = "${0/-}" ]]; then
		#$ECHO " ----------- TEST AREA START -----------"
		printe "Now it will work"
		#set -x
		#pick -m one two three four five six
		#set +x
		#$ECHO " ----------- TEST AREA END -----------"
	fi
#val=$(pick -m one two three four five six)
#echo
#echo "--> $val"
