#!/usr/bin/env bash
#
# Finalize internal paths
#
    SWARM_DIR_DOCS="${SWARM_DIR_ROOT}/docs"
    SWARM_DIR_LANG="${SWARM_DIR_DATA}/lang" # )"
    SWARM_DIR_THEMES="${SWARM_DIR_DATA}/themes"
    SWARM_DIR_TEMPLATES="${SWARM_DIR_DATA}/tpl"
    #SWARM_DIR_="${SWARM_DIR_ROOT}/"
#
# Make sure core utils could be found
# and that the user config exists
#
    # But first, lets talk english before we load any user config
    source "$SWARM_DIR_LANG/${SWARM[LANG]}/core.txt"
#
# Prepare some final variables for $SWARMRC
#
    DATE_CUR=$($DATE +'%Y.%m.%d')
    DATE_TIME=$($DATE +'%H:%M')
    DATE_TIME_LOG=$($DATE +'%H:%M:%S.%s')
    # Evalute home dir
    HOME="${HOME:-$(eval $ECHO ~$USER)}"
    # If its still empty, use 'cd' default behaviour to return to the users homedir if invoked without args
    [ -z "$HOME" ] && HOME=${k:-$(cd;$PWD_EXEC)}
#
#   Make it work cross-plattform
#   You thought getting the SWARM dir was hard?
#   Have fun reading this! :p
#
    # Last attempt to check for missing '$HOME'
    if [[ -z "$HOME" ]]
    then	# HOME is empty, if UID is empty too, assume machine is still booting
        if [[ 0 -eq "${UID:-0}" ]]
        then	# Its 'root', check both even though /root is not standard and might not be available
            known="/root /usr/etc /etc /"
            for k in $($AWK  -v FS=":" '/^root/ {print $6}' /etc/passwd 2>/dev/zero) $known
            do 	[[ -d "$k" ]] && HOME="$k" && export HOME && break
            done
        else	# Its normal user
            known="/Users /home"
            for k in $known	# Dont quote, or it would not expand to words / paths
            do 	[[ -d "$k" ]] && HOME="$k" && export HOME && break
            done
        fi
        [[ -z "$HOME" ]] && init.log.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND : uid = $UID : $known"
    else
        # So, HOME is set, lets see if it exists
        if [[ -d "$HOME" ]]
        then    # It does exit, 'save' it
                export HOME
        else    # Nope, lets use fallback settings then...
                [[ -z "$SWARMRC" ]] && init.log.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND"
                if [[ ! -z "$SWARMRC" ]]
                then    tmp_val=${SWARMRC##*/}
                        HOME=${SWARMRC/$tmp_val}
                        [[ ! -d "$HOME" ]] && \
                            HOME="" && \
                            init.log.msg "$SWARM_MSG_INIT_SWARMRC_PROV_NOT_FOUND" && \
                            SWARMRC=""
                fi
                export HOME=${HOME:-$PWD}
        fi
    fi
    # Just in case this doesnt work, we could preset this variable
    # SWARMRC=../xy ./your-script.sh [args]
    SWARMRC=${SWARMRC:-$HOME/.swarmrc}

    #
    # Perform Sanity checks
    #
        # Not all terminals support WIDTH and LINES....
        if [[ "x" == "x$WIDTH" ]] || [[ "x" == "x$LINES" ]]
        then    # Seems this terminal doesnt provide these variables...
                # Since it's 2020, lets do multi tasking this in the background!
            (
                while ${PS:-\ps} ${PPID:-$PID} | ${GREP:-\grep} ${PPID:-$PID} >> /dev/zero
                do
                    export WIDTH="$(eval $TPUT cols)"
                    export LINES="$(eval $TPUT lines)"
                    init.log "Updating geometrics for SWARM PID: ${PPID:-$PID}"
                    # Using 15 secs for fallback mode
                    sleep ${SWARM_INTERVALL_GEOMETRY:-15}
                done
            ) & >> /dev/zero
            # Just in case..
            SWARM_PID_THEME="$SWARM_PID_THEME $!"
        fi
