#!/usr/bin/env bash
##############################################
# SWARM = Shell Wrapper and Runtime Modifier #
# Author:	Simon Arjuna Erat (sea)	     #
# License:	GPL v2			     #
# Copyleft:	1995-2021		     #
# Created:	2020.01.18		     #
# Changed:	2021.03.02	 	     #
# Build:	63			     #
##############################################
#
#	SWARM is the successor of TUI (Text User Interace)
#	It is an interface between script authors and end users.
#	In doing so, the scripts you write,
#	will appear application-like to an end user.
#
#	This file is to be called from your script like eiter one of:
#	source ./runtime
#	source ./SWARM/runtime
#
#	To get started writing scripts, call this file like eiter one of:
#	./runtime help
#	./runtime manual
#	./runtime docs
#
#	To change settings, you can use eiter one of:
#	./runtime config
#	swarm.userconfig.edit
#	edit "$HOME/.swarmrc" "$HOME/.config/swarm/"
#
##############################################
# Requirements:
# * BASH 4.3+
# * GNU Coreutils 8.25
# *
#
# Speed increase:
# * Make sure '$HOME' is set and exists for all shell login accounts.
# * Preset SWARMDIR=/path/to/SWARM
#
# RAMDISK
# As root you can force the use of a RAMDISK
# for configuration, log- and possible tempfiles.
# If you should enounter a R(ead)O(nly)-system, logs and
# config files will be disabled, unless you:
# * Preset SWARM_RAMDISK=true
# * Optionaly, you may pass SWARM_RAMDISK_DIR=/path/to/mountpoint
##############################################
#
# Version Check
#
	if [[ -z ${BASH_VERSINFO[@]} ]] || [[ ${BASH_VERSINFO[0]} -lt 4  ]]
	then	# Print error of no BASH variables where found
		# Or if BASH version is too low
		printf '%s\n' "Requires BASH 4.3 or higher" ; return || exit
	else	# Bash version seems is 4 or higher
		if [[ 4 -eq ${BASH_VERSINFO[0]} ]]
		then 	# Major matches
			if [[ ${BASH_VERSINFO[1]} -lt 3  ]]
			then	# Minor does not
				printf '%s\n' "Requires BASH 4.3 or higher" ; return || exit
			fi
		fi
	fi
#
# Core Public Variables
#
	# SWARM
	${DEBUG:-false} && set -x
	# shellcheck disable=SC2086 disable=SC2184
	unset SWARM[@] ${!SWARM_DIR_*} IFS >/dev/zero
	declare -A SWARM
	# isSWARMfirstTime will be set to false if SWARMRC (~/.swarmrc) is found
	export isSWARMfirstTime=true
	# hasCOLUMNS is for internal use only
	[[ -n "$COLUMNS" ]] && \
		hasCOLUMNS=true || \
		hasCOLUMNS=false
	export hasCOLUMNS
	#echo $hasCOLUMNS;exit
	SWARM[VERSION]=0.8.7
	SWARM[BUILD]=63
	SWARM[AUTHOR]="Simon Arjuna Erat (sea)"
	SWARM[GIT]="http://github.com/sri-arjuna/swarm"
	SWARM[LICENSE]="GPLv2"
	# This is default 'highlighted' MACHINE or ROOT display
	# Non-root users (if existing) have very hardcoded 'default-blue' (fallback) theme
	SWARM[THEME]="default-red"
	SWARM[ROOTDIR]=""
	# Language must be pre-set up until the basic language file was loaded
	SWARM[LANG]="en_GB"
	export SWARM_CODE=$$
#
# Set first time default
#
#	This is just ment as failsafe if PATH is not set
#	to get the most elementary basics on/of most default systems
	posix_PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
	configure_PATH="$BINDIR:$SBINDIR"
	os_PATH=":$OS_DIR_BIN:$OS_DIR_SBIN"
	# Exporting an empty variable, but if it is, it will be filled with the current path.
	export PATH_OLD="${PATH_OLD:-$PATH}"
	# Use current PATH or if empty, default POSIX path, and append additional cross over paths
	# Might result in double entries if this file is source multiple times without properly
	# clearing the ENV by the use of swarm.cleanup
	PATH="${PATH:-$posix_PATH}:$configure_PATH:$os_PATH"
	# Make sure TERM is set
	TERM="${TERM:-GNU-Linux}"
	if [[ "" == "${TERM/GNU-Linux}" ]] || [[ "dumb" == "${TERM}" ]]
	then	TERM="xterm"
			# This is required to work within a SSH env
			export TERM
			# Skip selection if COLUMNS are preset
			if [[ -z "$COLUMNS" ]]
			then	echo "How many COLUMNS (width) does your terminal have?"
				select COLUMNS in 60 70 80 90 100 110 120 150 200 239;do break;done
				export COLUMNS
			fi
			# Skip selection if LINES are preset
		#	if [[ -z "$LINES" ]]
		#	then	echo "How many LINES (height) does your terminal have?"
		#		select LINES in 12 24 36 48 60;do break;done
		#		export LINES
		#	fi
	fi
	# Most basic commands ; do not change (But pre-set these variables in the shell for first use)!
	# This WILL be overwritten by the SWARMRC (~/.swarmrc)
	export ECHO="${ECHO:-echo}"
	export PRINTF="${PRINTF:-printf}"
	export AWK=${AWK:-\gawk}
	export GREP=${GREP:-\grep}
	export SED=${SED:-\sed}
	export LS=${LS:-\ls}
	export PWD_EXEC=${PWD_EXEC:-\pwd}
	export DATE=${DATE:-\date}
	export TOUCH=${TOUCH:-\touch}
	export PWD_EXEC=${PWD_EXEC:-\pwd}
	export TPUT="${TPUT:-tput}"
	# SU and SUDO must be empty if the command was not found
	# They are assigned now however, to 'overwrite' their location
	export SU=${SU}
	export SUDO=${SUDO}
	export ID=${ID:-\id}
	export WHOAMI=${WHOAMI:-\whoami}
	export SORT=${SORT:-\sort}		# NOT a GNU coreutil
	export LS=${LS:-\ls}
	export RM=${RM:-\rm}
	export RMDIR=${RMDIR:-\rmdir}
	export FIND=${FIND:-\find}
	export TR=${TR:-\tr}
	export WC=${WC:-\wc}
	export FOLD=${FOLD:-\fold}
	export WHICH="swarm.util.which"	# Defined in core.env
	export MKDIR="swarm.util.mkdir"	# Defined in core.env
	# These are required for internal functions to avoid security breaches
	# shellcheck disable=SC2155
	export -r PRINTABLE_PIPECHAR="$(${ECHO:-echo} -e \\u2502)" 2&>/dev/zero
	# shellcheck disable=SC2155
	export -r PRINTABLE_GREATER="$(${ECHO:-echo} -e \\u003e)" 2&>/dev/zero
	# shellcheck disable=SC2155
	export -r PRINTABLE_LESSER="$(${ECHO:-echo} -e \\u003c)" 2&>/dev/zero
#
# Some other things
#
	# Need to get these updating them self upon call
	# Use these to set the date variable: `
	export DATE_TODAY="$DATE +%F"
	export DATE_TIME="$DATE +%T"
	export DATE_TIME_LOG="$DATE +%T.%N"
#
# Get proper SWARM root dir
#
	# If no SWARMDIR is provided, it is used in runtime as designed
	# However, 'SWARMDIR=$PWD/SWARM source SWARM/runtime' could be used as a speedbooster,
	# as it bypasses the multiple physical read attempts
	# SWARMDIR - MUST - be provided if you intend to store
	# the files in a dir not named SWARM
	if [[ "x" == "x$SWARMDIR" ]]
	then
		# Find the path that holds this script
		# Evaluate best chance for the dirs
		for tmp in "$0" "${PWD:-$($PWD_EXEC)}" ".." "${PWD:-$($PWD_EXEC)}/.."
		do
			if [[ "SWARM" == "${tmp##*/}" ]]
			then	# We're in it already
				# Usualy debug or tryout mode
				SWARM[ROOTDIR]="$tmp"
				unset tmp
				break
			fi

			if [[ -d "${tmp}/SWARM" ]]
			then	# It's a sub dir
				# As it should be called
				SWARM[ROOTDIR]="$tmp/SWARM"
				unset tmp
				break
			fi
		done
		# Should not reach this point
		# Other than while debug testing
		[[ -f ./runtime ]] && SWARM[ROOTDIR]="${PWD:-$(${PWD_EXEC})}"
		unset tmp
	else
		# Or optionaly, use the 'install' method
		# Verify the location
		if [[ -f "${SWARMDIR}/runtime" ]]
		then	# Assign the variable
			SWARM[ROOTDIR]="$SWARMDIR"
		else	# This is the only hardcoded 'english only' message
			$PRINTF '%s\n' "Fatal, provided SWARMDIR=$SWARMDIR dir not found - assumed: \"${SWARM[ROOTDIR]}\" and you are in ${PWD:-$(${PWD_EXEC})}."
			sleep 3
			return 1
		fi
	fi
#
# SWARM_DIR_* for proper re-use
# source this file and type: SWARM_DIR_<hit tabulator>
#
	# Some might wonder why I did not use BASH_SOURCE[0]
	# -> Because if it was sourced with a relative reference,
	# I would not get an abslute path
	export SWARM_DIR_ROOT=${SWARM[ROOTDIR]}
	export SWARM_DIR_DOCS="${SWARM_DIR_ROOT}/docs"
	export SWARM_DIR_DATA="${SWARM_DIR_ROOT}/data"
	export SWARM_DIR_CONF="${SWARM_DIR_DATA}/conf"
	export SWARM_DIR_LIBS="${SWARM_DIR_DATA}/libs"
	export SWARM_DIR_LANG="${SWARM_DIR_DATA}/lang"
	export SWARM_DIR_LIST="${SWARM_DIR_DATA}/lists"
	export SWARM_DIR_THEMES="${SWARM_DIR_DATA}/themes"
	export SWARM_DIR_TEMPLATES="${SWARM_DIR_DATA}/templates"
#
# Load english strings for overall coverage for error messages.
# This is the default language, another one will only be attempted to load,
# if it is not starting with en_*  --> See line 260'ish
#
	for lang_file in "$SWARM_DIR_LANG/en_GB"/{core,usage}.conf
	do
		# shellcheck disable=SC1090
		source "$lang_file"
		$PRINTF "."
	done
#
# Load SWARM settings, core and sanity functions
#
	declare tmp_swarm_loading="" \
			tmp_len=0 \
			tmp_empty=""

	for thisCFG in "${SWARM_DIR_CONF}"/* "${SWARM_DIR_LIBS}"/core.env
	do
		# shellcheck disable=SC1090
		source "$thisCFG"
		$PRINTF "."
	done

#
# SWARM Environment checks
#

	for this in "${SWARM_DIR_LIBS}"/*
	do
		# Skip if core.utils or core.sanity
		#( [[ "$this" == "$SWARM_DIR_LIBS/core.utils" ]] || [[ "$this" == "$SWARM_DIR_LIBS/core.sanity" ]] ) && continue
		[[ "$this" == "$SWARM_DIR_LIBS/core.env" ]] && continue
		# Special handling for slow-mode
		if ${doSlowLoading:-false}
		then
			# This is off by default because nowadays it's too fast to see the regular way
			# Only recomended with numbers between 0.5 to 2 for application-like scripts
			# To have a 'cool intro'
			$PRINTF '\r%s' "$this"
			[[ $tmp_len -lt ${#this} ]] && \
					tmp_len=${#this} && \
					tmp_empty=$($PRINTF '%*s' $COLUMNS)
			sleep "${SWARM_INTERVALL_SLOW_LOADING:-0.3}"
			$PRINTF  "\r$tmp_empty"
		fi

		# Minimalistic output
		tmp_swarm_loading="${tmp_swarm_loading}."
		if [[ ! "${this:0:2}" == "\.[\.]" ]]
		then	# shellcheck disable=SC1090
			if source "$this"
			then	# All good
				$PRINTF '\r%s' "${tmp_swarm_loading}"
				 ${doLogExt:-false} && \
				 	init.msg.log "$SWARM_MSG_INIT_FILE_FOUND $this"
			else	# Not good
				 ${doLogExt:-false} &&  \
					 init.log "$SWARM_MSG_INIT_FILE_MISSING $this"
			fi
		#else
		#	[[ "*" == "$this" ]] || $PRINTF '%s\n' "$SWARM_MSG_INIT_FILE_MISSING $this"
		fi
	done
	unset tmp_swarm_loading \
			tmp_len \
			tmp_empty \
			this
#
# CORE is loaded, lets adapt the user settings
#
	# shellcheck disable=SC1090
	source "$SWARMRC"
#
# Load the users functions now
# if he has some that is
#
	# SWARM_USER_DIR_BASE was defined the the lib-functions
	# The following the dirs should be kept to default, but can be overwritten
	# by the SWARMRC, also, SWARM_USER_DIR_BASE might have been customized
	SWARM_USER_DIR_CONF="${SWARM_USER_DIR_CONF:-${SWARM_USER_DIR_BASE}/conf}"
	SWARM_USER_DIR_LIBS="${SWARM_USER_DIR_LIBS:-${SWARM_USER_DIR_BASE}/libs}"

	if [[ -d "$SWARM_USER_DIR_BASE" ]]
	then
		# Create the dir if not existing yet (first time)
		for tDir in "$SWARM_USER_DIR_CONF" "$SWARM_USER_DIR_LIBS"
		do
			# shellcheck disable=SC2154
			$isDir "$tDir" >/dev/null || ${MKDIR:-swarm.util.mkdir} "$tDir"
		done
		# Parse and source User Files, if files exist
		# Read configuration files before functions
		for uf in "${SWARM_USER_DIR_CONF}/"* "${SWARM_USER_DIR_LIBS}/"*
		do
			# Dont work with an asterix
			[[ '*' == "${uf:-1}" ]] && continue
			# shellcheck disable=SC1090
			if [[ -f "$uf" ]]
			then
				# shellcheck disable=SC2015
				source "$uf" && \
					$PRINTF "." || \
					init.log "$uf : $SWARM_MSG_INIT_FILE_MISSING"
			fi
		done
	fi
#
# Prepare language for user caused errors
# As well as for all helpfiles and manpages
# that the user may call/ask by ./runtime help
#
	# Only update language if LC_ALL is empty
	[[ -z "$LC_ALL" ]] && \
		swarm.update.lang && \
		swarm.update.lang.status
#
# Starting SWARM visuals now
#
	swarm.init.theme "$SWARM_THEME"
	swarm.update.geometry
#
# Initiate Interface : Runtime Executed
#
	# Check wether the runtime is executed or sourced
	# This is executed obviously:
	if [[ "runtime" = "${0##*/}" ]]
	then	# First time caller or missing arguments
		if [[ -z "$1" ]]
		then	# First Time // No arguments
			header "SWARM ${SWARM[VERSION]}-${SWARM[BUILD]} $SWARM_MSG_WORD_COPYRIGHT (C) 1995-2021 Simon Arjuna Erat (sea)" "" "$($DATE_TODAY) $PRINTABLE_PIPECHAR $($DATE_TIME)" #  	--default
			title "$SWARM_MSG_WORD_LICENSE"
			printe "" "$SWARM_MSG_PHRASE_WARRANTY1" ""
			printe "" "$SWARM_MSG_PHRASE_WARRANTY2" ""
			printe "" "$SWARM_MSG_PHRASE_WARRANTY3" ""
			title	"$SWARM_MSG_WELCOME_TITLE"
			status 1 "$SWARM_MSG_WELCOME_INFOLINE1"
			status 111 "$SWARM_MSG_WELCOME_INFOLINE2"
			printe "$SWARM_MSG_WELCOME_INFOLINE3" "${SWARM_USER_DIR_SCRIPTS}/SWARM"
			title	"$SWARM_MSG_WORD_ARGUMENTS"
			$ECHO "$SWARM_MSG_WELCOME_CONTENT" | printe -2 -- # "TODO: Visuals, then explain, configure and stuff..."
			$PRINTF '\n'
			exit 0
		else	# Has arguments, lets parse
			$PRINTF "$(swarm.print.goto 0)"
			case "${1,,}" in
			"config")
				shift
				swarm.eu.show.config
				exit $?
				;;
			"demo")
				swarm.eu.demo
				exit $?
				;;
			"help" | "--help" | "-h")
				shift
				# Lets show a basic help menu
				swarm.eu.help.menu "${@}"
				exit $?
				;;
			"tarball")
				# shellcheck disable=SC2164
				cd "${SWARM_DIR_ROOT}/.."
				F="$HOME/swarm-${SWARM[BUILD]}-full.tar.gz"
				tar -acf "$F" "${SWARM_DIR_ROOT##*/}" 2&>/dev/null
				[[ -f "$F" ]]
				status $? "$F"
				cd "$OLDPWD"
				;;
			"tar")
				# shellcheck disable=SC2164
				cd "${SWARM_DIR_ROOT}/.."
				F="$HOME/swarm-${SWARM[BUILD]}.tar.gz"
				tar -acf "$F" --exclude ".git" "${SWARM_DIR_ROOT##*/}"  2&>/dev/null
				[[ -f "$F" ]]
				status $? "$F"
				cd "$OLDPWD"
				;;
			"new")
				case "$2" in
				"function")
					shift 2
					swarm.eu.new.function "${@}"
					;;
				"script"|"scripts")
					shift 2
					swarm.eu.new.scripts "${@}"
					;;
				*)
					swarm.eu.new.menu
					;;
				esac
				exit $?
				;;
			"words"|"word")
				title "$SWARM_MSG_WORD_WORDS"
				# shellcheck disable=SC2086
				swarm_wordlist="$($ECHO ${!SWARM_MSG_WORD_*})"
				declare C=0 T=0
				for this_word in $swarm_wordlist
				do
					((C++))
					((T++))
					[[ $C -eq 11 ]] && \
						C=1 && \
						title
					printe "$T" "$this_word" "${!this_word}"
				done
				;;
			"phrase"|"phrases")
				title "$SWARM_MSG_WORD_PHRASES"
				# shellcheck disable=SC2086
				swarm_wordlist="$($ECHO ${!SWARM_MSG_PHRASE_*})"
				declare C=0 T=0
				for this_word in $swarm_wordlist
				do
					((C++))
					((T++))
					[[ $C -eq 10 ]] && \
						C=0 && \
						title
					printe "$T" "$this_word" "${!this_word}"

				done
				;;
			"log")
				title "SWARM LOG"
				${MORELESS:-cat} "$SWARM_LOG"
				exit $?
				;;
			"stats")
			#
			#	Vars
			#
				LINER="########################################"
				COMMENTS=0
				lines=0
				BLANKS=0
			#
			#	Action
			#
				# shellcheck disable=SC2164
				cd "$SWARM_DIR_ROOT"
				$ECHO "$LINER"
				$ECHO -e "\t$SWARM_MSG_STATS_TITLE \"${PWD##*/}\""
			# Size
				$ECHO "$LINER"
				# shellcheck disable=SC2016
				swarm.list.dirtree . | swarm.str.dirsize -- | \
					${AWK:-awk} \
						-v FOLDER="$SWARM_MSG_STATS_FOLDERS" \
						-v KB="$SWARM_MSG_WORD_KB" \
						'{print $0;SUM=SUM+$1} END {print NR" "FOLDER" "SUM/1024" "KB}' | $SED s,"${SWARM_DIR_ROOT}\/",'',g
			# Files
				$ECHO "$LINER"
				FILES=$($FIND|$GREP -ve ".git" | $WC -l)
				eval "$ECHO" "$SWARM_MSG_STATS_FILES"
			# Lines
				for F in $($FIND|$GREP -ve ".git" -ve ".jpg" -ve ".png" -ve ".gif")
				do	if [[ -f "$F" ]]
					then
						# shellcheck disable=SC2016
						val_num=$($WC -l "$F" | $AWK '{print $1}')
						COMMENTS=$(( COMMENTS + $($GREP ^"#" "$F" | $WC -l) ))
						lines=$(( lines + val_num ))
						BLANKS=$(( BLANKS + $($GREP ^[[:space:]]$ "$F" | $WC -l) ))
					fi
				done
				$ECHO -e "$SWARM_MSG_STATS_LINES: \t\t $lines"
				$ECHO -e "$SWARM_MSG_STATS_COMMENTS: \t $COMMENTS"
				$ECHO -e "$SWARM_MSG_STATS_BLANK: \t\t $BLANKS"
				$ECHO -e "$SWARM_MSG_STATS_AVERAGE: \t $(( lines / FILES ))"

				# shellcheck disable=SC2164
				cd "$OLDPWD"
			;;
			remove)
				title "$SWARM_MSG_WORD_REMOVE: SWARM"
				printe "$SWARN_MSG_PHRASE_REMOVE_SWARM"
				yesno "$SWARM_MSG_WORD_REMOVE $SWARM_MSG_WORD_CONFIGURATION ($SWARMRC)?" || exit 1
				swarm.util.rm -v "$SWARMRC" "$SWARM_USER_DIR_BASE"
			;;
			theme)
				swarm.clear
				if [[ -n "$2" ]]
				then	swarm.update.theme "$2"
					cfg.set -v "$SWARMRC" "SWARM_THEME" "$2"
					exit 0
				else	newtheme=$(pick -m $(swarm.list.theme))
					swarm.update.theme "$newtheme"
					cfg.set -v "$SWARMRC" "SWARM_THEME" "$newtheme"
					exit 0
				fi
				;;
			hwinfo)
			#	set -x
				pre='swarm\.hw\.info\.'
				list=$(	declare | $GREP 'swarm.hw.info' | $AWK '/\(\)/ {print $1}' | $GREP -v ^"_" )
				cur="" last="x"
				for ls in $list
				do
					#cur=${cur##*\.} # Last part of it

					#set -x
					cur="${ls/$pre/}"
					cur=${cur/\.*}

					if [[ ! "$cur" == "$last" ]]
					then	set +x
						title "${cur}"
						last="$cur"
					fi
					#set +x
					printe "$ls:" "$(echo $($ls))"
				done
			#	set +x
				;;
			esac
		fi
	fi
#
# Exit script or beginn user scripts
#
${DEBUG:-false} && set +x
