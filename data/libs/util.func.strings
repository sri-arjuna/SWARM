#!/usr/bin/env bash
swarm.str.hash() { # [-v|--verbose] [-t|-type md5,sha1,sha224,sha256,sha384,sha512] STRING1 FILE2 ..
# Prints the hash of any passed string or file
# Use verbose mode if you have multiple items to hash, or have multiple hashes for any iven item.
 	swarm.protect "${FUNCNAME[@]}" "(${CALLER:-$SWARM_MSG_WORD_UNKOWN})" "${@}" && return 1
# Variables
 	local RET=1 beVerbose=false types="" TOOLS="" missing=""
# Catch arguments
 	while :; do
 		case "$1" in
 		-h|-\?|--help)
                 	swarm.help.usage "${FUNCNAME[@]}"
 			return 0            	;;
 		--)
 			# General purpose pipe support, might need adjustment!
 			while read line;do
 				${FUNCNAME[@]} "$line"
 			done
 			return 0		;;
 		-t|--type)
                        local tmp_list=""
                        tmp_list=$( $ECHO "$2" | $SED s/','/'\n'/g )
                        types+=" $tmp_list"
                        # Just 1, the other is at the end of the loop
                        shift                   ;;
                -v|--verbose)
                        beVerbose=true          ;;
                *)	break 			;;
 		esac
 		shift
 	done
# Collect the tools
        # If no hash type is defined, use md5 as default
        [[ -z "$types" ]] && types="md5"
	for T in ${types};do
		case $T in
		ck*)	TOOLS+=" cksum"	        ;;
                md5*)   TOOLS+=" md5sum"	;;
		*224*)	TOOLS+=" sha224sum"	;;
		*256*)	TOOLS+=" sha256sum"	;;
		*384*)	TOOLS+=" sha384sum"	;;
		*512*)	TOOLS+=" sha512sum"	;;
		# This must be last or 512 will count too
                *1*)	TOOLS+=" sha1sum"	;;
		esac
	done
# Are the tools installed?
# Use md5sum if no tools are provided
        for t in ${TOOLS}
        do
                swarm.util.which "$t" 1>/dev/zero || missing+=" ${t/sum/}sum"
        done
        # Install missing ones
        [[ -n "$missing" ]] && swarm.os.install -v "$missing"
# Action & Display
 	if [ "-" = "$1" ] || [ "--" = "$1" ]
	then	# Do pipe handling
		while read stream
		do 	$beVerbose && \
                                title "$SWARM_MSG_WORD_HASHED \"$stream\"" || \
                                $PRINTF '\n%s\n' "${stream}:"
			for T in $TOOLS
			do	str=$($ECHO "$stream" | "$T" | $AWK '{print $1}')
				$beVerbose && \
					printe  "$T:" "$str" || \
					$PRINTF '%s\r\t\t%s\n' "$T" "$str"
			done
		done
	else	# Passed arguments
                for A in "${@}"
		do	$beVerbose && \
                                title "$SWARM_MSG_WORD_HASHED \"$A\"" || \
                                $PRINTF '\n%s\n' "${A}:"
			for T in $TOOLS
			do	str=$($ECHO "$A" | $T | $AWK '{print $1}')
				$beVerbose && \
					printe  "$T:" "$str" || \
					$PRINTF '%s\r\t\t%s\n' "$T" "$str"
			done
		done
	fi

}
swarm.str.seconds2time() { # SECONDS
# Returns the TIME as string
# as much as applicable: hh:mm:ss
	local tmp_input="${1:-0}"
	local tmp_work="$tmp_input"
	local M=60 H=3600
	local hours=0 minutes=0 seconds=0
# Get hours
	while [[ $tmp_work -ge $H ]]
	do
		((hours++))
		tmp_work=$(( tmp_work - H ))
	done
# Get minutes
	while [ $tmp_work -ge $M ]
	do
		((minutes++))
		tmp_work=$(( tmp_work - M ))
	done
	seconds=$tmp_work
# We do not need zeroed times
	# if there are 0 hours, we do not need the value at all
        [[ $hours -eq 0 ]] && hours=""
        [[ $minutes -eq 0 ]] && minutes=""
# Prepare strings for output
        if [[ -n "$hours" ]]
        then    if [[ -n "$minutes" ]]
                then    # Hour is given, so we need seperators..
                        case "${#minutes}" in
                        1)      minutes=":0$minutes:"   ;;
                        2)      minutes=":$minutes:"    ;;
                        esac
                else    # Minutes are empty
                        minutes=":00:"
                fi
        else    # Hour is empty, but there are always seconds
                [[ -n "$minutes" ]] && minutes="$minutes:"
        fi
        [[ 1 -eq ${#seconds} ]] && seconds="0$seconds"

# Output
	$PRINTF "${hours}${minutes}$seconds"
}
swarm.str.filesize() { # [ -k -m ] FILE
# Returns the filesize in bytes
#
	local MODE="bytes"
	local VAR=""
	for opt in "${@}"
	do
		case "$opt" in
		"-k")	MODE=kilo ; VAR="$opt" ; shift	;;
		"-m")	MODE=mega ; VAR="$opt" ; shift	;;
		esac
		if [[ -d "$1" ]]
		then
			for f in "$1"/*
			do
				[[ -f "$f" ]] && "${FUNCNAME[@]}" "$VAR" "$f"
			done
			continue
		fi
		[[ -z "$1" ]] && return 0
	done
# Action
	if [[ "$1" == "--" ]]
	then
		# shellcheck disable=SC2162
		while read line
		do
			"${FUNCNAME[@]}" "$VAR" "$line"
		done
	else
		case "$MODE" in
		"bytes")
			# shellcheck disable=SC2016
			${LS:-\ls} -l "$1"| $AWK -v Text="$SWARM_MSG_WORD_BYTES" '{print $5 " " Text  }'
			;;
		"kilo")
			${LS:-\ls} -l "$1" | $AWK -v Text="$SWARM_MSG_WORD_KILOBYTES"  '{print sum/1024 " " Text  }'
			;;
		"mega")
			# shellcheck disable=SC2016
			${LS:-\ls} -l "$1" | $AWK -v Text="${SWARM_MSG_WORD_MEGABYTES}"  '{print $5/1024/1024 " " Text}'
			;;
		esac
	fi
}
swarm.str.dirsize() { # [ -k -m ] DIR
# Prints "SIZE TYPE in DIR"
# -k for kilobytes ; -m for megabytes
	local MODE=bytes
	local VAR=""
	for opt in "${@}"
	do
		case "$opt" in
		"-k")	MODE=kilo ; VAR="$opt" ; shift	;;
		"-m")	MODE=mega ; VAR="$opt" ; shift	;;
		esac
	done
# Action
	if [[ "$1" == "--" ]]
	then
		while $READ -r line
		do
			# shellcheck disable=SC2031
			${FUNCNAME} ${VAR} "$line"
		done
	elif [[ -f "$1" ]] || [[ -d "$1" ]]
	then	case "$MODE" in
		"bytes")
			# shellcheck disable=SC2016
			${LS:-\ls} -l "$1" | $AWK -v DIR="$1" -v Text="$SWARM_MSG_DIR_SIZE_IN_BYTES" '{sum=sum+$5} END {print sum " " Text " \r\t\t\t" DIR }'
			;;
		"kilo")
			# shellcheck disable=SC2016
			${LS:-\ls} -l "$1" | $AWK -v DIR="$1" -v Text="$SWARM_MSG_DIR_SIZE_IN_KB"  '{sum=sum+$5} END {print sum/1024 " " Text " \t" DIR }'
			;;
		"mega")
			# shellcheck disable=SC2016
			${LS:-\ls} -l "$1" | $AWK -v DIR="$1" -v Text="${SWARM_MSG_DIR_SIZE_IN_MB}"  '{sum=sum+$5} END {print sum/1024/1024 " " Text " \t" DIR }'
			;;
		esac
        else    echo "Could not parse: $1"
	fi
}
swarm.str.bool2str() { # [options] $?
# Returns a string from a BOOL input
#
	swarm.protect "${FUNCNAME[@]}" "${@}" && exit 1
	#
	# Defaults
	#
		local caps #=false
		local CAPS #=false
		local mode #="yes"
		local out=""
		#echo " ---------- $@ ----------- "
	#
	# Catching Arguments
	#
		# A ':' after a char indicates that this option requires an argument
		# Get access to the passed value of the argument by using $OPTARG
		while getopts "cCdoty" opt
		do
		 	case ${opt} in
			"c")	caps=true
					shift	;;
			"C")	CAPS=true
					shift	;;
			"d")	mode="done"
					shift	;;
			"t")	mode="true"
					shift	;;
			"y")	mode="yes"
					shift	;;
			"o")	mode="on"
					shift	;;
		#	*)	echo opt $opt ; exit 99	;;
			esac
		done
		shift $((OPTIND - 1))
	#
	# Display & Action
	# This also handles translations
	#
		case "${mode}" in
		"done")	case "$1" in
			0)	out="$SWARM_MSG_WORD_DONE"	;;
			1)	out="$SWARM_MSG_WORD_FAIL"	;;
			esac
			;;
		"true")	case "$1" in
			0)	out="$SWARM_MSG_WORD_TRUE"	;;
			1)	out="$SWARM_MSG_WORD_FALSE"	;;
			esac
			;;
		"on")	case "$1" in
			0)	out="$SWARM_MSG_WORD_ON"	;;
			1)	out="$SWARM_MSG_WORD_OFF"	;;
			esac
			;;
		"yes"|*)	case "$1" in
			0)	out="$SWARM_MSG_WORD_YES"	;;
			1)	out="$SWARM_MSG_WORD_NO"	;;
			esac
			;;
		esac

		# Show the output
		if ${CAPS:-false}
		then	$PRINTF "${out^^}"
		elif ${caps:-false}
		then	$PRINTF "${out^}"
		else	$PRINTF "$out"
		fi
}
swarm.str.num2char() { # NUM
# Returns a letter string: a-z
# Or: aa-az ba-bz, etc
	swarm.protect "${FUNCNAME[@]}" "${@}" && exit 1
	local array
	num="$1"
	out=""
	# Quoting these echo's will break the output
	[ "$num" -gt 700 ] && \
		array=( $($PRINTF '%s\n' {a..z} {a..z}{a..z} {a..z}{a..z}{a..z} ))	|| \
		array=( $($PRINTF '%s\n' {a..z} {a..z}{a..z} )) 	# Be fast for letters in range..
	out="${array[$num]}"
	$PRINTF '%s\n' "$out"
}
swarm.str.num2roman() { # NUM
# Returns NUM in roman letters
#
	swarm.protect "${FUNCNAME[@]}" "${@}" && exit 1
	input="$1"	# input num
	output=""	# Clear output string
	len="${#input}"	# Initial length to count down
	U="\033[4m"	# Underscore, multiplies with 1000
	R="\033[0m"	# Resets the underscore
	_roman_val() { # NUM one five ten
	# This sub does the basic 'roman' algorithm
	#
		N="$1"
		one="$2"
		five="$3"
		ten="$4"
		out=""
		case "$N" in
		0)	out+=""	;;
		[123])	while [ "$N" -gt 0 ]
			do	out+="$one"
				((N--))
			done
			;;
		4)	out+="$one$five"	;;
		5)	out+="$five"	;;
		[678])	out+="$five"
			N="$((N-5))"
			while [ "$N" -gt 0 ]
			do	out+="$one"
				((N--))
			done
			;;
		9)	while [ "$N" -lt 10 ]
			do	out+="$one"
				((N++))
			done
			out+="$ten"
			;;
		esac
		echo "$out"
	}
	while [ "$len" -gt 0  ]
	do	# There are letters to add
		num="${input:0:1}"
		# Do action according position
		case "$len" in
		1)	output+=$(_roman_val "$num" I V X)	;;
		2)	output+=$(_roman_val "$num" X L C)	;;
		3)	output+=$(_roman_val "$num" C D M)	;;
		4)	output+=$(_roman_val "$num" M "${U}"V"${R}" "${U}"X"${R}")	;;
		5)	output+=$(_roman_val "$num" "${U}"X"${R}" "${U}"L$"{R}" "${U}"C"${R}")	;;
		*)	# Count it up
			Tone="CI\)"
			Tfive="I\)"
			Tten="CCI\)\)"
			DEPTH="$(( len - 3 ))"	# 1 = 1000 = initial template
			while [ "$DEPTH" -gt 1 ]
			do	Tone="C$Tone)"
				Tfive="C$Tfive)"
				Tten="C$Tten)"
				((DEPTH--))
			done
			output+=$(_roman_val "$num" "$Tone" "$Tfive" "$Tten"  )
			;;
		esac
		input="${input:1}" ; len="${#input}"
	done
	$PRINTF "$output"
}
swarm.str.num2uni() { # HEX
# Returns the Unicode character of given HEX
# https://unicode-table.com/en/blocks // https://unicode-table.com/de/
	[[ -z "$1" ]] && return 1
	$PRINTF "\\u$1"
}
swarm.str.num2ascii() { # NUM
# Returns the ASCII of given NUM
# https://www.unix.com/shell-programming-and-scripting/284185-problems-converting-decimal-ascii-back-decimal.html
	[[ -z "$1" ]] && return 1
	[[ $1 =~ ^[0-9]+$ ]] || return 1
	$PRINTF "\\$($PRINTF '%03o' "$1")"
}
swarm.str.ascii2num() { # "CHAR"
# Returns the (ASCII-)NUM of given CHAR
# https://www.unix.com/shell-programming-and-scripting/284185-problems-converting-decimal-ascii-back-decimal.html
	[[ $# -gt 1 ]] && return 1
	$PRINTF "%u\n" "'${1}"
}
swarm.str.extension() { # FILENAME
# Returns the file extension of a given FILENAME
# REturns empty if no extension was found
	local ext="${1##*.}"
	# Tar is the only (known to me) file extension with 2 strings
	local TAR=""
	# Workaround for tarballs...
	$ECHO "$1" | $GREP -q ".tar" && \
		TAR="tar." || TAR=""
	if [ "$ext" = "$1" ]
	then	$ECHO ""
	else 	$ECHO "$TAR$ext"
	fi
}
swarm.str.genfilename() { # FILENAME.EXT [NEXT_EXT]
# Prints the filename with an increased index before [NEW_]EXT
#
	local this="$1"	# File without EXT?
	local EXT="" ; EXT=$(swarm.str.extension "$this")	# OLD
	local ext="" ; ext="${2:-$EXT}"	# Fill 'ext' with old EXT if its empty
	this="${this%%$EXT}"
#
#	Action & Display
#
	# Set the initial name check according to presets:
	# Currently only known special case: tar
	local NAME_INIT="${this/\.tar/}.$ext"
	NAME_INIT="${NAME_INIT/\.\./\.}"
	if [[ -f "${NAME_INIT}" ]]
	then	C=0		# Counter
		local NAME_CHECK="${this/\.tar}.$C.$ext"
		NAME_CHECK="${NAME_CHECK/\.\./\.}"
		while [[ -f "${NAME_CHECK}" ]]
		do	((C++))
			NAME_CHECK="${this/\.tar}.$C.$ext"
			NAME_CHECK="${NAME_CHECK/\.\./\.}"
		done

		# Finally a file that does not exist yet
		$ECHO "$NAME_CHECK" >&1
	else	# File does not exist, and can be used
		$ECHO "$NAME_INIT"  >&1
	fi
}
#shellcheck disable=SC2120
swarm.str.usb() { #
# Lets user select among found/pluged in USB devices
# Returns hardware path, example: /dev/sdb
	swarm.str.usb.getspace() { # NUM
	# Returns string of NUM space chars
	#
		local C=0
		local out=""
		while [[ "$C" -lt "$1" ]];do out+=" ";let C++;done
		$ECHO "$out"
	}
	swarm.str.usb.getlist() { #
	# Lists the contend of $devDisk, limits the output to usb items and removes partition entries
	# If there is something to ignore, that one will be hidden too
		# shellcheck disable=SC2154
		if [[ -z "$usbIgnore" ]]
		then	"$LS" "$devDisk" | $GREP usb | "$GREP" -v part
		else	"$LS" "$devDisk" | $GREP usb | "$GREP" -v part | "$GREP" -v "$usbIgnore"
		fi
	}
# Variables
	# Make sure there is something available
	local msg="$SWARM_MSG_USB_CONNECT"
	#local left="$BORDER_LEFT $msg"
	local list=""
	local sleeper=0.0001
	local targetUsb=""
	local devDisk=/dev/disk/by-id
	local tDev=""
	local AUTO=false
# Catch options
	for opt in "${@}"
	do
		case "${opt}" in
		"-a")
			AUTO=true
			;;
		esac
	done
# Loop while waiting for --item-list-without-the-ignored-ones--
	while [[ -z "$list" ]] ; do
		bar "$msg" >&2
		list="$(swarm.str.usb.getlist)" 2>/dev/null
		list="${list/$usbIgnore}"
		sleep $sleeper
		[[ "$sleeper" = "0.0001" ]] && sleeper=1.2
	done
#
#	Check for user settings for default behaviour.
#	This is required so internal card readers do not get in the way,
#	or so you can select to (not) use it automatically
#
	# shellcheck disable=SC2154
	if [[ $($ECHO "$list"|$WC -w) -eq 1 ]] && [[ -z "$usbAsk" ]]
	then	# There is no setting yet, first time usage
		printe  "$SWARM_MSG_USB_ONLY_AVAIL : ${list}" >&2
		if yesno "$SWARM_MSG_USB_CARD_LISTED" >&2
		then	if yesno "$SWARM_MSG_USB_CARD_IGNORE" >&2
			then	# Save the card reader
				cfg.set -v "$SWARM_USER_CONF" usbIgnore "\"$list\""
				RET=1
			else	printe  "$SWARM_MSG_USB_ASK_AGAIN" >&2
				yesno "$SWARM_MSG_USB_ASK_DESC" >&2
				RET=$?
			fi
		else	RET=1
		fi
		cfg.set -v "$SWARM_USER_CONF" usbAsk "$(swarm.str.bool2str -t "$RET")"  >&2
		# shellcheck disable=SC1090
		source "$SWARM_USER_CONF"
		[ -z "$usbIgnore" ] || return 1
	fi
#
#	Ask now or not?
#
	if ${usbAsk:-true}
	then	$AUTO && \
			targetUsb=$(pick -a "${list[@]}") || \
			targetUsb=$(pick "${list[@]}")
	else	targetUsb=$(pick -a "${list[@]}")
	fi
	tDev=$($READLINK -f "$devDisk/$targetUsb")
	$ECHO "$tDev" >&1
}
swarm.str.humanreadable() { # [-p NUM] [-B] [--reverse] BYTES
# Prints a human readable nunmebr with appended mb/gb
# Expects BYTES as input
	local mode opts reverse
	mode="--to=iec"
	while :;do
		case "$1" in
	#	"")	return 1
	#		;;
		-B)	opts+=" --suffix=B "
			;;
		-p)	opts+=" --padding=$2 "
			shift
			;;
		--reverse)
			mode="--from=iec"
			reverse="$1"
			;;
		--)	while read line
			do
				$FUNCNAME ${reverse:-${mode/--to=iec}} $opts "$line"
			done
			return
			;;
		*)	break
			;;
		esac
		shift
	done
	# Lets put a casual fallback detection here..
	# Hope this works
	numfmt $mode $opts "$1" 2>/dev/zero || numfmt ${mode/to/from} $mode $opts "$1"
}
