#!/usr/bin/env bash
#
# 	Treeview reference
#
# swarm.sysinfo.*
#	.screen*	(name)
#		.list
#		.hz
#		.res
# 	.net		(name of active device, ex: wlp3s0)
#		.list
#		.ipx	(eXtern)
#		.ip
#		.ip6
#	.usb
#		.devices
#		.names
#	.cpu		(Nam
#		.core
#		.threads
#		.hz
#	.ram
#		.free
#		.used
#		.total
#	.chassis
#
#
swarm.sysinfo.box.cpu() { #
# Prints the CPU name, family, cores and mhz
#
	LC_ALL=C $AWK -F':' '/^model name/ {print $2}' /proc/cpuinfo | uniq | $SED -e 's/^[ \t]*//'
}
swarm.sysinfo.box.cpu.sockets() {
# Prints the amount of cpu sockets on the platine
#
	LC_ALL=C lscpu | $AWK -F ":" '/^Socket/ {print $2}'
}
swarm.sysinfo.box.cpu.cores() {
# Prints the amount of cores per cpu
#
	LC_ALL=C lscpu | $AWK -F ":" '/^Core/ {print $2}'
}
swarm.sysinfo.box.cpu.threads() {
# Prints the amount of threads per core
#
	LC_ALL=C lscpu | $AWK -F ":" '/^Thread/ {print $2}'
}
swarm.sysinfo.box.cpu.mhz() {
# Prints either the 'fix' mhz
# or the range of valid values.
	LC_ALL=C lscpu | $AWK -F ":" '/[Mm][hH]z/ {print $1" "$2}' | $SED s,"CPU ","",g
}
swarm.sysinfo.box.cpu.vendor() {
# Prints either the 'fix' mhz
# or the range of valid values.
	LC_ALL=C lscpu | $AWK -F ":" '/^Vendor/ {print $2}'
}
swarm.sysinfo.box.cpu.mips() { #
#
#
	LC_ALL=C lscpu | $AWK -F ":" '/^BogoMIPS/ {print $2}'
}
_swarm.sysinfo.list_input() {
#
#
	$AWK -F '="' '/Name/ {print $2}' "/proc/bus/input/devices" | $SED s,'"','',g # | \
	return
}
swarm.sysinfo.box.keyboard() {
# Prints connected keyboards
# 1 per line
	LC_ALL=C _swarm.sysinfo.list_input | $GREP -i -e key -e touchpad | uniq
}
swarm.sysinfo.box.mouse() {
# Prints connected mice
# 1 per line
	LC_ALL=C _swarm.sysinfo.list_input | $GREP -i -e mouse -e track | uniq | $SED s,"Dell Dell","Dell",
}
swarm.sysinfo.hw.video() {
# Prints connected video
# 1 per line
	LC_ALL=C _swarm.sysinfo.list_input | $GREP -i -e video -e hdmi | $GREP -i -v sound | uniq
}
swarm.sysinfo.hw.video.drivers() { #
# Parses a few known video drivers and prints those it found
#
	{
		# TODO use dynamic FD to lesser hw usage
		$AWK  '/i[89]/ {print $18}' /proc/bus/pci/devices
		$AWK  '/nouv/ {print $18}' /proc/bus/pci/devices
		$AWK  '/radeon/ {print $18}' /proc/bus/pci/devices
		# These 2 below are just blind shots
		$AWK  '/[nN][vV][iI][dD][iI][aA]/ {print $18}' /proc/bus/pci/devices
		$AWK  '/[aA][tT][iI]/ {print $18}' /proc/bus/pci/devices

	} | uniq
}
swarm.sysinfo.hw.video.path() {
	$GREP -A10 "$(swarm.sysinfo.hw.video|$GREP -i video )" "/proc/bus/input/devices" | $GREP -i -v sound | $AWK -F "Sysfs=" '/Sysfs=/ {print $2}'
}
swarm.sysinfo.hw.video.list() {
	$LS -1 /dev/vid* 2>/dev/zero
}
swarm.sysinfo.box.mic() {
# Prints connected microphones
# 1 per line
	LC_ALL=C _swarm.sysinfo.list_input | $GREP -i -e mic -e voice | $SORT -u
}
swarm.sysinfo.box.headphones() {
# Prints connected headphones
# 1 per line
	LC_ALL=C _swarm.sysinfo.list_input | $GREP -i -e headph | $SORT -u
}
swarm.sysinfo.hw.screen() {
# Prints connected screens/monitor/display
# 1 per line
	if ! $isGUI
	then 	#{ $ECHO "$SWARM_MSG_PHRASE_SSHSESSION" ; return 1 ; }
		$PRINTF '%s\n' "$TERM"
		return 0
	fi
	# Check if the app is needed
	swarm.util.which xrandr &>/dev/zero 2&>/dev/zero || swarm.os.install xrandr
	# the space makes the difference!
	LC_ALL=C xrandr | $AWK '/ connected/ {print $1}'
}
swarm.sysinfo.hw.screen.list() {
# Prints connected screens/monitor/display
# 1 per line
	if ! $isGUI
	then	$isSSH && \
			$ECHO "$SSH_TTY" || \
			$ECHO "$SWARM_MSG_PHRASE_TERMINAL"
		#SWARM_MSG_PHRASE_SSHSESSION
		return 1
	fi
	# Check if the app is needed
	swarm.util.which xrandr &>/dev/zero || swarm.os.install xrandr
	# the space makes the difference! (dis(-)connected)
	LC_ALL=C xrandr | $AWK '/connected/ {print $1}'
}
swarm.sysinfo.hw.screen.res() {
# Prints the screens resolution
#
	if ! $isGUI
	then 	#{ $ECHO "$SWARM_MSG_PHRASE_SSHSESSION" ; return 1 ; }
		$PRINTF '%sx%s' "$COLUMNS" "$LINES"
		return 0
	fi
	# Check if the app is needed
	local resDone=false
	while ! $resDone
	do
		if swarm.util.which xrandr &>/dev/zero
		then	LC_ALL=C xrandr | $AWK '/\*/ {print $1}'
			resDone=true
		elif swarm.util.which xdpyinfo
		then	xdpyinfo | grep dimensions | awk '{print $2}'
			resDone=true
		fi

		if ! $resDone
		then	# An application to detect dimension is required
			local thisApp=""
			thisApp=$(pick xrandr xdpyinfo)
			[[ -z "$thisApp" ]] && swarm.os.install $thisApp
		fi
	done
}
swarm.sysinfo.net() {
# Prints the name of the active internet device
# 1 per line
	swarm.util.which ip >/dev/zero || return 1
	LC_ALL=C ip addr | $GREP -v "NO-CARRIER" | $AWK -F ":" '/BROADCAST/ {print $2}'
}
swarm.sysinfo.net.wifi() {
# Returns true and the name of the wifi if available
#
	$GREP -i ^w <<< $(swarm.sysinfo.net)
}
swarm.sysinfo.net.wifi.driver() {
# Returns the driver for wireless
#
	LC_ALL=C lspci|$AWK -F: '/Wireless/ {print $3}'
}
swarm.sysinfo.net.list() {
# Prints available network device names
#
	$LS -1 /sys/class/net
	#swarm.util.which ip >/dev/zero || return 1
	#LC_ALL=C ip addr | $AWK -F ":" '/^[1-9]/ {print $2}'
}
swarm.sysinfo.net.ip4() {
# Prints the IPv4 adress
#
	swarm.util.which ip >/dev/zero || return 1
	LC_ALL=C ip addr | $GREP inet | $GREP  -ve 127\.0 -ve " ::" -ve "inet6" | $AWK '{print $2}'
}
swarm.sysinfo.net.gateway() {
# Prints the IPv4 gateway
#
	swarm.util.which ip >/dev/zero || return 1
	LC_ALL=C ip addr | $GREP inet | $GREP  -ve 127\.0 -ve " ::" -ve "inet6" | $AWK '{print $4}'
}
swarm.sysinfo.net.ip6() {
# Prints the IPv6 adress
#
	swarm.util.which ip >/dev/zero || return 1
	LC_ALL=C ip addr | $GREP inet | $GREP  -ve 127\.0 -ve " ::" -ve "inet " | $AWK '{print $2}'
}
swarm.sysinfo.net.ip_ext() { # [-v]
# Prints the external IPv4 adress
#
	return

	local failsafe=0 data beVerbose=false ret=1
	[[ "$1" == "-v" ]] && { beVerbose=true ; shift ;}
	if swarm.util.which dig &>/dev/zero
	then	dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/zero
		return 0
	else	case "${CURLWGET:-curl}" in
		*curl)	$CURLWGET ifconfig.me/ip 2>/dev/zero ; ret=$?		;;
		*wget)	$CURLWGET -qO - ifconfig.me/ip ; ret=$?	;;
		*)	$ECHO "$SWARM_MSG_INIT_CURLWGET_NFOUND: $CURLWGET" ; return 1;;
		esac
		[[ 0 -eq $ret ]] && return 0
	fi
	hostname -i && return 0
	return 1
}
swarm.sysinfo.net.hostname() {
# Prints the hostname
#
	[[ -f "/etc/hostname" ]] && \
		$CAT "/etc/hostname" || \
		hostname
}
swarm.sysinfo.box.vendor() {
# Prints the chassis vendor
#
	$CAT /sys/class/dmi/id/chassis_vendor 2>/dev/zero || $ECHO "$SWARM_MSG_WORD_UNKOWN"
}
swarm.sysinfo.box.name() {
# Prints the product name / description
#
	$CAT /sys/class/dmi/id/product_name 2>/dev/zero || $ECHO "$SWARM_MSG_WORD_UNKOWN"
}
swarm.sysinfo.box.type() {
# Prints the wether the system is VM or physical
#
	vserver=$(LC_ALL=C lscpu | $GREP Hypervisor | $WC -l) || return 1
	if [ $vserver -gt 0 ]
	then 	$ECHO "VM"
	else 	$ECHO "Physical"
	fi
}
swarm.sysinfo.net.ssh() {
# Prints true or false, depending if 'this' is a SSH session
#
	local ret
	$ECHO ${isSSH}
	$isSSH && ret=0 || ret=1
	return $ret
}
swarm.sysinfo.net.ssh.client() {
# Prints the ip of the SSH client
	if swarm.sysinfo.net.ssh >/dev/zero
	then	$ECHO ${SSH_CLIENT/ */}
	else	return 1
	fi
}
swarm.sysinfo.net.ssh.connection() {
# Prints information about the SSH connection
#
	if swarm.sysinfo.net.ssh >/dev/zero
	then	$ECHO ${SSH_CONNECTION} | \
			$AWK -v arrow="$(swarm.str.num2uni 2794)" '{print $1" "arrow" "$3}'
	else	return 1
	fi
}
swarm.sysinfo.net.ssh.tty() {
# Prints which TTY is used for SSH
#
	if swarm.sysinfo.net.ssh >/dev/zero
	then	$ECHO $SSH_TTY
	else	return 1
	fi
}
swarm.sysinfo.box.ram() {
# Prints an overview of ram values
#
	local total free used
	total="$(swarm.sysinfo.box.ram.total| swarm.str.humanreadable --)"
	used=$(swarm.sysinfo.box.ram.used | swarm.str.humanreadable --)
	free=$(swarm.sysinfo.box.ram.free | swarm.str.humanreadable --)
	#$PRINTF '%s/%s : %s\n' "$(swarm.sysinfo.ram.used|swarm.str.humanreadable --)" "$(swarm.sysinfo.ram.total|swarm.str.humanreadable --)" "$(swarm.sysinfo.ram.free|swarm.str.humanreadable --)"
	$ECHO "$used/$total : $free"
}
swarm.sysinfo.box.ram.total() { #
# Prints how much ram is installed
#
	local input_k size
	input_k=$($AWK '/MemTotal/ {print $2}' /proc/meminfo)
	$ECHO $(( input_k * 1024 ))
}
swarm.sysinfo.box.ram.free() { #
# Prints the free ram
#
	local input_k size
	input_k=$($AWK '/MemAvailable/ {print $2}' /proc/meminfo)
	$ECHO $(( input_k * 1024 ))
}
swarm.sysinfo.box.ram.used() { #
# Prints how much ram is used
#
	$ECHO "$(swarm.sysinfo.box.ram.total)" "$(swarm.sysinfo.box.ram.free)" | $AWK '{print ($1 - $2) }'
}
swarm.sysinfo.os.user.local() { #
# Shows local users (that have a home directory)
#
	$LS "$HOME/.."
}
swarm.sysinfo.os.user.loged() {
# Shows users that are currently loged in
#
	users
}

swarm.sysinfo.hw.audio() { #
# Prints audio information found by lspci
#
	#lspci | $GREP -i audio | swarm.str.split --
	#lspci -vvv | grep -A10 -i audio | grep -i -e audio -e subs
	#lspci -vvv | grep -A1 -i audio  | printe -1 --right -n -- ; printf "\n"
	LC_ALL=C raw=$(lspci -vvv | $GREP -A1 -i audio | $GREP -v "\-\-" ) || { init.log.msg "$SWARM_MSG_PHRASE_FILENOTFOUND: lspci" ; return 1 ; }
	$AWK -F: '/Audio device/ {print $3}' <<< "$raw" | uniq
	$AWK -F: '/Subsystem/ {print $2}' <<< "$raw" | uniq
}
swarm.sysinfo.hw.audio.driver() { #
# Prints a list of know audio drivers
#
	$AWK '/snd/  {print $18}' /proc/bus/pci/devices | uniq

}
_swarm.sysinfo.() {
# Prints the IPv6 adress
#
	swarm.util.which ip >/dev/zero || return 1
	LC_ALL=C
}
