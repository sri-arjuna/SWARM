#!/usr/bin/env bash
##############################################
# SWARM = Shell Wrapper and Runtime Modifier #
# Author:     Simon Arjuna Erat (sea)        #
# Copyleft:   1995-2020
# Created:    2020.01.18                     #
# Changed:    2020.03.10                     #
# Build:      2                              #
##############################################
#
# Core Public Variables
#
    # SWARM
    unset SWARM[@] ${!SWARM_DIR_*}
    declare -A SWARM
    SWARM[VERSION]=0.1
    SWARM[BUILD]=2
    SWARM[AUTHOR]="Simon Arjuna Erat (sea)"
    SWARM[GIT]="http://github.com/sri-arjuna/swarm"
    SWARM[LICENSE]="LGPL"
    # This is default 'highlighted' MACHINE or ROOT display
    # Non-root users have 'default-blue' theme
    SWARM[THEME]="default-red"
    SWARM[ROOTDIR]=""
    # Language must be pre-set up until the basic language file was loaded
    SWARM[LANG]="en_GB"
    SWARM_CODE=$$
#
# Set first time default
#
#	This is just ment as failsafe if PATH is not set
#	to get the most elementary basics on/of most systems
	PATH="${PATH:-/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$BINDIR:$SBINDIR:$OS_DIR_BIN:$OS_DIR_SBIN}"
    # Most basic commands ; do not change!
    PRINTF=${PRINTF:-\printf}
    ECHO=${ECHO:-\printf}
    AWK=${AWK:-\gawk}
    GREP=${GREP:-\grep}
    SED=${SED:-\sed}
    LS=${LS:-\ls}
    PWD_EXEC=${PWD_EXEC:-\pwd}

#
# Get proper SWARM root dir
#
    # If no SWARM_DIR_INSTALLED is provided, it is used in runtime as designed
    # However, 'SWARM_DIR_INSTALLED=$PWD source SWARM/rc' could be used as a speedbooster,
    # as it bypasses the multiple physical read attempts
    if [[ -z "${SWARM[ROOTDIR]}" ]] && [[ "x" == "x$SWARM_DIR_INSTALLED" ]]
    then
        # Find the path that holds this script
        # Evaluate best chance for the dirs
        for tmp in $0 ${PWD:-$($PWD_EXEC)} .. ${PWD:-$($PWD_EXEC)}/..
        do
                if [[ "SWARM" == "${tmp##*/}" ]]
                then    # We're in it already
                        # Usualy debug or tryout mode
                        SWARM[ROOTDIR]="$tmp"  #"${tmp/\.\.\/SWARM}/SWARM"
                        unset tmp
                        break
                fi

                if [[ -d "${tmp}/SWARM" ]]
                then    # It's a sub dir
                        # As it should be called
                        tmp2="${tmp/SWARM\/\.\.\/SWARM}"
                        SWARM[ROOTDIR]="$tmp2"  #"${tmp/\.\.\/SWARM}/SWARM"
                        unset tmp tmp2
                        break
                fi
        done
        unset tmp
    else
        # Or optionaly, use the installed method
        if [[ -d "${SWARM_DIR_INSTALLED}" ]]
        then
                # Assign the variable
                SWARM[ROOTDIR]="$SWARM_DIR_INSTALLED"
        else
                # This is the only 'english only' message
                # That is hardcoded
                $PRINTF '%s\n' "Fatal, no SWARM dir found - assumed: ${SWARM[ROOTDIR]}"
                sleep 2
                exit 1 || return 1
        fi
    fi
#
# SWARM_DIR_* for proper re-use
#
    SWARM_DIR_ROOT=${SWARM[ROOTDIR]}
    SWARM_DIR_DATA="${SWARM_DIR_ROOT}/data"
    SWARM_DIR_CONF="${SWARM_DIR_DATA}/conf"
    SWARM_DIR_LIBS="${SWARM_DIR_DATA}/libs"
#
# Load default configuration
# And all english strings as fallback
#
    declare tmp_swarm_loading="" \
            tmp_len=0

    for this in \
            "${SWARM_DIR_CONF}"/* \
            "${SWARM_DIR_DATA}"/core/* \
            "${SWARM_DIR_LIBS}"/*
    do
        if ${doSlowLoading:-false}
        then
                # This is off by default because nowaways it's too fast to see the regular way
                $PRINTF '\r%s' "$this"
                [[ $tmp_len -lt ${#this} ]] && \
                        tmp_len=${#this} && \
                        tmp_empty=$($PRINTF '%*s' $COLUMNS)
                sleep ${SWARM_INTERVALL_SLOW_LOADING:-0.3}
                printf  "\r$tmp_empty"
        fi

        # Minimalistic output
        tmp_swarm_loading="${tmp_swarm_loading}."
        [[ ! "${this:0:2}" == "\.[\.]" ]] && source "$this" && $PRINTF '\r%s' "${tmp_swarm_loading}" || $PRINTF "$SWARM_MSG_INIT_FILE_MISSING $this\n"

        # Start spaming the log file, if  desired
        ${doLogExt:-false} && log "$SWARM_MSG_INIT_FILE_FOUND $this"
    done
    unset tmp_len \
            tmp_swarm_loading
#
# Initiate Interface
#
    echo
    echo " ----------- TEST AREA -----------"
    ## Core sanity
    # swarm.sanity.env
    # swarm.theme.list

    swarm.print.border
    #
    #swarm.core.line.print.border

    #swarm.sanity.coreutils

    #cat $SWARM_LOG
    echo " ----------- TEST AREA -----------"
