#!/usr/bin/env bash
# Here are functions used to make sure the parsing of the environment works (smoother)
#
# Some additional possible passed variable parsing
#
	# Forced 'ReadOnly' mode?
	${SWARM_RAMDISK:-false} && \
		isRO=true || \
		SWARM_RAMDISK=false
#
# Basic utility
#
	init.msg() { $PRINTF '%s\n' "$1" ;}
	init.log() { ${isRO} && return ; init.msg "$($DATE +%T.%N) SWARM :: $1" >> "$SWARM_LOG";}
	init.log.msg() { init.msg "$1"; init.log "$1";}
	init.log.check() {
	# Checks for log path and logfile
	# Creates if required and prints date and or divider line
		local RET
		local DT
		DT="$($DATE_TODAY)"	# These single quotes are to 'execute'
		# Check if its the first time
		if [[ ! -f "$SWARM_LOG" ]]
		then
			# Create logfile, return false if this fails
			! $TOUCH "$SWARM_LOG" && \
				init.msg "$SWARM_LOG : ${SWARM_MSG_PHRASE_COULDNOTCREATE}  @ uid:${UID:-$EUID}" && \
				return 1
		fi
		# If todays date was not found, write it
		if $GREP "$DT" "$SWARM_LOG" >/dev/null
		then	# Print a visual divider
			tail -n 1 "$SWARM_LOG" | ${GREP:-\grep} -q " -------------------"  || init.msg " -------------------"  >> "$SWARM_LOG"
			RET=$?
		else	# Date is missing, print that instead
			init.msg "$DT" >> "$SWARM_LOG"
			RET=$?
		fi

		# Exit function
		return $RET
	}
#
# Sometimes all that is needed,
# is a propper Clean Up
#
	#shellcheck disable=SC2120
	swarm.cleanup() { #
	# Clears all known variables and sub routines on terminal exit from memory
	# This is for security and proper coding alike
		#shellcheck disable=SC2086
		unset -v ${!USER_*}		# Shellcheck, this fails if I use quotes as suggested
		local stodo="error protect \
			color.bg color.fg color.list \
			eu.demo eu.help eu.help.menu eu.new.function eu.new.menu eu.new.script eu.show.advanced eu.show.basics eu.show.config eu.show.submenu eu.show.variables eu.function.list eu.function.show \
			help.manpage help.screen help.usage os.based os.distro os.desktop
			init.theme \
			lang.count lang.list lang.load \
			print.bold print.border print.goto print.text print.underline print.blink print.stroke \
			sanity.env sanity.env.coreutils sanity.userconfig sanity.userconfig.write sanity.ramdisk.create \
			str.ascii2num str.num2ascii str.bool2str str.dirlist str.dirsize str.filesize str.extension str.genfilename str.num2char str.num2roman str.num2uni str.seconds2TIME str.split str.status str.usb \
			util.cd util.cp util.echo util.isDir util.isGUI util.isRoot util.mkdir util.tar util.which \
			update.lang update.lang.status update.geometry fs.get_waiting \
			theme.list theme.update "
		local msg_lst="

	$SWARM_MSG_INIT_SWARM_CLEARED_MEMORY
"
	# Clear unused background processes
		for p in ${SWARM_PID_USED}
		do
			kill -s SIGKILL "$p" 2>/dev/null
			# Shorten the list by removing the 'done' ones
			SWARM_PID_USED="${SWARM_PID_USED/$p}"
		done
	# Delete files
		! $isRO && \
			[[ -f "$SWARM_TMP" ]] && $RM "$SWARM_TMP"
	# Clean up swarm functions
		for todo in $stodo
		do
			[[ -n "${stodo/cleanup/}" ]] && eval unset -f swarm."$todo"
		done
	# Clean up other functions
		for todo in 	edit filemgr terminals web \
				cfg.edit cfg.list. cfg.get. cfg.set \
				init.msg init.log init.log.msg init.log.check init.countdown
		do
			eval unset -f "$todo"
		done
	# Keep this one alive : Save
		local otmp="${SWARM_INSTALLED_DIR}"
		#shellcheck disable=SC2086
		unset -v ${!SWARM_*}
	# Keep this one alive : Restore
		export SWARM_INSTALLED_DIR="$otmp"
	# Continue with unset
		unset CURL WGET CURLWGET CAT ECHO PRINTF TPUT READ FIND otmp
		unset AWK GREP SED SUDO SU LS MKDIR RM RMDIR WHICH TOUCH WHOAMI WC TR DU
		unset isRoot isGUI isDir
		#shellcheck disable=SC2086
		unset -v ${!num*} ${!c_*} ${!clr*} identRight
		#shellcheck disable=SC2086
		unset -v ${!len*} ${!has*} ${!pos*} ${!is*}
		#shellcheck disable=SC2086
		unset -v MORELESS  ${!BORDER_*} SORT ${!DATE*} ID ${!HOST*} ${!host*} BAR BAR_EMPTY
		unset MORE LESS UMOUNT MOUNT FOLD CHMOD READLINK CD CP
		unset PWD_EXEC RM_EXEC MV_EXEC CP_EXEC CD_EXEC
	# Traps
		#cant trap: SIGKILL SIGSTOP
		trap - SIGALRM
		trap - SIGTERM
		trap - SIGQUIT
		trap - SIGINT
		trap - SIGABRT
		trap - EXIT
		#trap - SIGHUP
		#trap - SIGPROF
		#trap - SIGBUS
		#trap - SIGFPE
		#trap - SIGSYS
		#trap - SIGSEGV
		#trap - SIGCONT

		unset -f traps_save
		unset saved_traps
		unset SWARM_INSTALLED_DIR SWARMRC
		export PATH="$PATH_OLD"
		unset PATH_OLD
		export eval $(traps_restore)
		unset -f traps_restore
		unset -f swarm.cleanup

		# Show while sourced in terminal
		[[ "bash" = "$0" ]] && echo "$msg_lst"
	}
#
# Error handling
#
	swarm.error() { # CALLER SCRIPT FUNCNAME LINENO [CONTENT]
	# Prints an error message and exits
	#
		#shellcheck disable=SC2034
		caller="\$1" script="\$2" funcname="\$3" lineno="\$4"
		shift 4
		#shellcheck disable=SC2034
		content=($($ECHO "\${@}"))
		$PRINTF "\n"
		# The eval is required for the function to work after export
		#shellcheck disable=SC2086
		eval $PRINTF '\t%s:\t%s\n' \\
			"Callerscript" "\$caller" \\
			"Scriptname" "\$script" \\
			"Functionname" "\$funcname :: \$FUNCNAME" \\
			"Linenumber" "\$lineno :: \$LINENO"
		#shellcheck disable=SC2034
		for cont in "\${content[@]}";do
			$PRINTF '\t* %s\n' "\$cont"
		done
		# Original
		#trap - HUP INT QUIT ABRT ALRM TERM EXIT
		#shellcheck disable=SC2119
		swarm.cleanup
		traps_restore
		return 1
	}
	swarm.protect() { # ARGS
	# Searches for injection subjects
	# Returns true if it finds some
		typeset arg ac=0
		local fname="$1" ; shift
		for arg do
		ac=$((ac++))
		case "$arg" in
		(*[';´|<&>']*|*':('*|*':-'*)			# OLD : Original
		#( *[';´<&>']* | *[^\\]\|* | *':('* | *':-'* )	# New : Allows escaped '|'
			$PRINTF "%s\n" "${SWARM_MSG_INIT_INJECTION:-Aborting, injection detected!} arg${ac}=$arg $fname"
			read -r
			return 0
		;;
		esac
		done
		return 1
	}
	swarm.help.screen() { # "$SWARM_MSG_HELP_???"
	# Simply shows the help screen
	#
		swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
		cat <<-HELP_SCREEN
	${1}
	HELP_SCREEN
	}
#
# Traps & Error messages
#
	traps_save() { saved_traps="$(trap)" ; export saved_traps;}
	traps_restore() { eval \$saved_traps;}
	export -f traps_save traps_restore
	export -f swarm.error swarm.cleanup
	traps_save
	# Start my own traps....
	#shellcheck disable=SC2064
	trap "swarm.error \${caller:-\$0} \$0 \$FUNCNAME \$LINENO '\$($ECHO -E \${@})'" ABRT ALRM  INT #STOP #QUIT TERM HUP SEGV CONT PROF BUS SYS FPE
	trap "swarm.cleanup"  QUIT TERM  INT  EXIT # KILL STOP HUP ALRM
#
# First the most important basics
#
	if [[ -z "${UID:-${EUID}}" ]]
	then	# It's empty, lets get an id otherwise
		# This should fail actualy, but trying anyway.
		# I mean, it should never ever get to here....
		# And if these variables are empty, they should not be readonly to cause an error
		init.msg "$SWARM_MSG_INIT_NO_ID : uid=$UID euid=$EUID id=$(${ID:-\id})"
		UID=$(${ID:-\id} -u)
		EUID=$(${ID:-\id} -u)
	fi
#
# Some tools
#
	swarm.util.isRoot() { #
	# Returns TRUE if user ID is 0
	# Returns FALSE otherwise ; This function is assigned to: $isRoot
		if [[ ${UID:-${EUID:-0}} -eq 0 ]]
		then	$ECHO true
			return 0
		else	$ECHO false
			return 1
		fi
	}
	swarm.util.isGUI() { #
	# Returns TRUE if XDG_CURRENT_DESKTOP, DESKTOP_SESSION or XAUTHORITY is set
	# Returns FALSE otherwise ; This function is assigned to: $isGUI
		if [[ -n "${XDG_CURRENT_DESKTOP:-${DESKTOP_SESSION:-$XAUTHORITY}}" ]]
		then	$ECHO true
			return 0
		else	$ECHO false
			return 1
		fi
	}
	swarm.util.mkdir() { # /path/to/make
	# Creates full path structures
	# This function is assigned to: $MKDIR
		# Cant create dirs if system is read only
		${isRO:-false} && ! ${SWARM_RAMDISK:-false} && init.log.msg "$SWARM_MSG_INIT_RO_NODIR ($1)" && return 1
		# Remove any possible args from ARGS
		while [[ "-" == "${1:0:1}" ]] ; do shift ; done
		swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
		# Vars
		local dir_done=""
		local dir_todo
		# shellcheck disable=SC2140
		dir_todo=$($PRINTF "${1:1}" | $SED s,"/","\n",g)
		# Start pipe
		$PRINTF '%s\n' "$dir_todo" | while read -r current
		do	# Prepare next dir
			dir_done+="/$current"
			# Create if not exist
			[[ -d "$dir_done" ]] || ${MKDIR_EXEC:-\mkdir} "$dir_done"
		done
		return 0
	}
	swarm.util.echo() { # [-e|-n|-en|-ne] STRING
	# Simple echo's, by RudiC @ unix.com
	# This function is assigned to: $ECHO
		swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
		echo_(){
		  ( IFS=" "; $PRINTF "%s\n" "$*" )
		}
		# Portable echo -n
		echo_n() {
		  ( IFS=" "; $PRINTF "%s" "$*" )
		}
		# Portable echo -e
		echo_e() {
		  ( IFS=" "; $PRINTF "%b\n" "$*" )
		}
		# Portable echo -ne
		echo_ne() {
		  ( IFS=" "; $PRINTF "%b" "$*" )
		}

		case "${1/-}" in
		"n")	shift ; echo_n "${@}"	;;
		"e")	shift ; echo_e "${@}"	;;
		"en"|"en")
			shift ; echo_ne "${@}"	;;
		*)		echo_ "${@}"	;;
		esac
	}
	swarm.util.isDir() { # [ -c(ount) ] /path/to/dir
	# Returns true if passed string is a directory
	# This function is assigned to: $isDir
		swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
		local RET=1
		if [[ $# -gt 1 ]]
		then	# More than one argument
			if [[ "$1" == "-c" ]]
			then	# Count rounds
				shift
				RET=0
				for d in "${@}"
				do
					[[ -d "$d" ]]
					RET=$(( $? + RET ))
				done
			else	# Just check it
				for d in "${@}"
				do
					[[ -d "$d" ]]
					RET=$?
				done
			fi
		else
			[[ -d "$1" ]] && RET=0
		fi
		return ${RET:-1}
	}
	swarm.util.which() { # COMMAND ...
	# Returns true if COMMAND was found in PATH, false if empty
	# This function is assigned to $WHICH
		swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
		local RET=1
		# Parse for args
		case $# in
		0|"-h")	swarm.help.usage "${FUNCNAME[@]}"
		 	return 1
			;;
		1)	case "$1" in
			"-"|"--")
				while read -r cmd
				do
					# shellcheck disable=SC2128
					$FUNCNAME "$cmd" && RET=0
				done
				return $RET
				;;
			esac
			;;
		*)	for arg in "${@}"
			do
				# shellcheck disable=SC2128
				$FUNCNAME "$arg" && RET=0
			done
			return $RET
			;;
		esac
		# Get an arry
		local array=($($ECHO "$PATH"|$SED s,':','\n',g))
		# Parse for application
		for Arr in "${array[@]}"
		do
			# Return success on first find
			[[ -f "$Arr/$1" ]] && \
				$PRINTF '%s\n' "$Arr/$1" && \
				return 0
		done
		# Return false if nothing was found
		return 1
	}
	swarm.os.desktop() { #
	# Returns the name of the DE/WM or terminal application name
	# Assigned to: $DESKTOP
		$PRINTF '%s\n' "${DESKTOP_SESSION:-${XDG_CURRENT_DESKTOP:-${GDMSESSION:-${TERM:-TTY${XDG_VTNR:-?}}}}}"
	}
	swarm.os.distro() { #
	# Returns the name of the distro
	# Assigned to: $DISTRO
		# This /etc is not as dynamic as I'd like
		# but its THE absolute standard - as far as I'm aware
		#shellcheck disable=SC2140
		if [[ ! -f "/etc/os-release" ]] || ! ${GREP} -E  ^NAME= "/etc/os-release"  | $SED s,"NAME=","",g >&1
		then
			local e=/etc
			local SF="release version"	# Search For
			local strcat=""			# Init empty variable

			local results=""
			results=$(for a in $SF;do $LS "$e"|"$GREP" "$a";done)
			local resultsFiles=""
			resultsFiles=$(for each in $results;do [[ -f "$e/$each" ]] && $ECHO "$each ";done)

		# Basic detection
			for each in $resultsFiles
			do      strcat=$($GREP -i "^NAME=" "$e/$each")
				[[ -n "$strcat" ]] && break
				strcat=$($GREP -i "^id=" "$e/$each")
				[[ -n "$strcat" ]] && break
			done
		# Prepare easy printable result
			local result=""
			result=$($ECHO "${strcat/*=}")
		# 'Advanced' (aka backup) detection if empty
			if [[ -z "$result" ]]
			then
				# This works for Cygwin...
				result=$(uname -s)
				# TODO: any other exceptions uncovered?
				# Or further actions required?
			fi
		# Print output
			$ECHO "${result}"
		fi
	}
	swarm.os.based() { #
	# Returns arch, debian, redhat or unknown
	# Assigned to: $BASED
    		out=""
		if [[ -f /etc/redhat-release ]]
		then	out=RedHat
		elif [[ -f /etc/arch-release ]]
		then	out=Arch
		elif [[ -f /etc/debian_version ]]
		then	out=Debian
		elif $GREP -q Solaris /etc/*release*
		then	out=Solaris
		else	out=${SWARM_MSG_WORD_UNKOWN,,}
			# Do further checking
			# Changes according to: https://github.com/icy/pacapt/blob/ng/pacapt (153-180)
			swarm.util.which cave   1>/dev/null 2>/dev/null && out=exherbo
			swarm.util.which emerge 1>/dev/null 2>/dev/null && out=gentoo
			swarm.util.which port   1>/dev/null 2>/dev/null && out=mac
			swarm.util.which brew   1>/dev/null 2>/dev/null && out=mac
			swarm.util.which zypper 1>/dev/null 2>/dev/null && out=opensuse
			# Not sure if i handle these 2 properly
			swarm.util.which pkg 1>/dev/null 2>/dev/null && out=openbsd
			swarm.util.which pkgng 1>/dev/null 2>/dev/null && out=freebsd
		fi
		set -x
		$ECHO "$out" | $SED s,'\"','',
		set +x
	}
	_swarm.os.install.get_pkg_mgr() { #
	# Checks for known 'based' distributions, to assing their according package manager
	#
		case "${BASED,,}" in
		redhat)
			if swarm.util.which dnf 1>/dev/null 2>/dev/null
			then	APP="dnf"
			else	APP="yum"
			fi
			;;
		debian)		APP="apt-get"		;;
		arch)		APP="pacman"		;;
		opensuse)	APP="zypper"		;;
		exherbo)	APP="cave"		;;
		gentoo)		APP="emerge"		;;
		*bsd)		APP="pkg"		;;
		mac)
			for app in brew port
			do	if swarm.util.which "$app" 1>/dev/null
				then	APP="$app"
					break
				fi
			done
			# Could not find a package manager, exit with failure
			status 1 "$SWARM_MSG_INSTALL_NO_MGR"
			status 111 "$SWARM_MSG_INSTALL_REPORT"
			return 1
			;;
		*)	# Capture anything else that might have a supported package manager
			for app in apt-get cave dnf yum emerge pacman zypper port brew pkg
			do
				if swarm.util.which "$app" 1>/dev/null
				then	APP="$app"
					break
				fi
			done
			# Could not find a package manager, exit with failure
			status 1 "$SWARM_MSG_INSTALL_NO_MGR"
			status 111 "$SWARM_MSG_INSTALL_REPORT"
			return 1
			;;
		esac
		# Could find an app manager, lets save it
		#cfg.set -v "$SWARMRC" PKG_MGR "$APP"
		export PKG_MGR="$APP"
	}
	swarm.os.install() { # [-v] Packagename PKGNAME2 ..
	# Installs given PACKAGES via the local package manager
	# Use verbose [-v] mode if you are uncertain of package names, it will handle each package by itself
		local APP="" CMD="" beVerbose=false RET=0 ret=0
	# Show help if no arguments were passed
		[[ -z "$1" ]] && { swarm.help.usage "${FUNCNAME[@]}" ; return 1 ; }
	# Abort if user is not ROOT, and sudo was not found.
		! $isRoot && ! $useSudo && { status 1 "${FUNCNAME[@]}: $SWARM_MSG_PHRASE_REQUIRES_ROOT_ACCESS" ; return 1 ; }
	# Get (expected) arguments
		[[ "-v" == "$1" ]] && { beVerbose=true ; shift ; }
	# Parsing: Package manager arguments...
		case "${PKG_MGR,,}" in
		# RedHat, Fedora, CentOS, Scientific Linux, and more
		dnf|yum) 	CMD=" install"		;;
		# Debian / Ubuntu / Raspberry, and more
		apt-get) 	CMD="-q install"	;;
		# Arch, Manjaro, and more
		pacman)		CMD="-S"		;;
		# open-/SUSE
		zypper) 	CMD="install"		;;
		# exherbo
		cave) 		CMD="resolve -x"	;;
		# Gentoo
		emerge) 	CMD=""			;;
		# Mac, OSX, etc
		port|brew) 	CMD="install"		;;
		# FreeBSD, OpenBSD, and many more
		pkg)		CMD="install"		;;
		esac
	# Handle silent parameters
		case "$APP" in
		yum|dnf|apt-get|brew|port|zypper|pkg)
				CMD+=" -y"		;;
		pacman)		CMD+=" --noconfirm"	;;
		#emerge|cave)	echo missing		;;
		esac
	# Mini function:
		_swarm.os.install.it () { # PKG
		# FUNCTION > /dev/null 2>&1 &
			if $isRoot
			then	$APP $CMD "$p" 2>"$SWARM_TMP" 1>"$SWARM_TMP"
				$ECHO "$?" > "$SWARM_TMP"
			else	# Sudo should be installed & allowed
				$SUDO $APP $CMD "$p" 2>"$SWARM_TMP" 1>"$SWARM_TMP"
				$ECHO "$?" > "$SWARM_TMP"
			fi
		}
	# Get the job done:
		if $beVerbose
		then	# Handle each package by itself
			for p in "${@}"
			do
				bar "${SWARM_MSG_WORD_INSTALLING}: $p"
				( _swarm.os.install.it "$p" & )
				PID=$!
				SWARM_PID_USED+=" $!"
			# Wait for output
				sleep 0.1
				while $PS -aux | $GREP "$APP" | $GREP -q -v "$GREP"
				do 	bar "${SWARM_MSG_WORD_INSTALLING}: $p"
					sleep 0.2
				done
				ret=$(<"$SWARM_TMP")
			# Output
				RET=$(( RET + ret ))
				status "$ret" "$SWARM_MSG_WORD_INSTALLED: ${p}"
				init.log "$SWARM_MSG_WORD_INSTALLED ($(swarm.str.bool2str -d $ret)) $SWARM_MSG_WORD_FOR ${script_name:-<${SWARM_MSG_WORD_UNKOWN^^}>}: $p"

			done
		else	# Handle everything at once
			$APP $CMD "${@}"
			status "$?" "$SWARM_MSG_WORD_INSTALLED: ${*}"
			ret=$?
			init.log "$SWARM_MSG_WORD_INSTALLED ($(swarm.str.bool2str -d $ret)) $SWARM_MSG_WORD_FOR ${script_name:-<${SWARM_MSG_WORD_UNKOWN^^}>}: ${@}"
		fi
		RET=$(( RET + ret ))
		return "${RET:-${ret}}"
	}
#
# Short variable access to util functions
# and to keep file usage to a minimum
#
	# Bools
	#shellcheck disable=SC2034
	isDir="swarm.util.isDir"  isGUI=$(swarm.util.isGUI)  isRoot=$(swarm.util.isRoot)
	# Strings
	#shellcheck disable=SC204
	DESKTOP=$(swarm.os.desktop)  DISTRO=$(swarm.os.distro) 	BASED=$(swarm.os.based)
	#shellcheck disable=SC2034
	TAR="swarm.util.tar" CP="swarm.util.cp" MV="swarm.util.mv" RM="swarm.util.rm" CD="swarm.util.cd"
#
# Prepare and make sure of essential environment paths
#
	#shellcheck disable=SC2034
	declare isSourced=false
	# Evalute default home dir
	#shellcheck disable=SC2086
	HOME="${HOME:-$($PRINTF ~$USER)}"
	# If its still empty, use 'cd' default behaviour to return to the users homedir if invoked without args
	[ -z "$HOME" ] && HOME=$(cd || return 1;$PWD_EXEC)
	# Last attempt to check for missing '$HOME'
	if [[ -z "$HOME" ]] || [[ ! -d "$HOME" ]]
	then	# HOME is empty, assume machine is still booting
		if $isRoot
		then	# Its 'root', check both even though /root is not standard and might not be available
			# Use /etc or even / just as an absolute emergency fallback..
			known=$(<"$SWARM_DIR_LIST/os.dir.home.root") $(<"$SWARM_DIR_LIST/os.dir.etc") /
			#shellcheck disable=SC2016
			for k in $known $($AWK  -v FS=":" '/^root/ {print $6}' /etc/passwd 2>/dev/zero)
			do 	[[ -d "$k" ]] && export HOME="$k" && break
			done
		else	# Its 'normal' user
			known=$(<"$SWARM_DIR_LIST/os.dir.home.users")
			for k in $known
			do 	[[ -d "$k" ]] && export HOME="$k" && break
			done
		fi
		[[ -z "$HOME" ]] && init.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND : uid = $UID : $known ($k)"
	fi
	# So, HOME is (should be) set, lets see if it exists
	# Can not use init.log.msg here, because LOG path is not determinded yet
	if [[ -d "$HOME" ]]
	then	# It does exit, 'save' it
		export HOME
	else	# HOME was not found, was SWARMRC passed?
		if [[ -z "$SWARMRC" ]]
		then	init.msg "$SWARM_MSG_INIT_HOME_NOT_FOUND"
		elif [[ -f "$SWARMRC" ]]
		then	# If SWARMRC was passed and exists,
			# try to use its directory as HOME
			tmp_val=${SWARMRC##*/}
			HOME=${SWARMRC/$tmp_val}
			[[ ! -d "$HOME" ]] && \
				HOME="" && \
				init.msg "$SWARM_MSG_INIT_SWARMRC_PROV_NOT_FOUND" && \
				unset SWARMRC
		fi
		# Set HOME, or use current USER dir if SWARMRC could not be found
		export HOME="${HOME:-$PWD}"
	fi
#
# LOG, TMP and RAMDISK dir handling
#
	swarm.sanity.ramdisk.create() { #
	# Creates a ramdisk if SWARM_RAMDISK=true was set before sourcing SWARM
	#
		$isRoot || return 1
		# System is ReadOnly, no config files can be written
		$PRINTF "TODO - RAMDISK Act accordingly"
		# Get basedir and create ramdisk location
		if [[ -n "$SWARM_RAMDISK_DIR" ]] || [[ -d "${SWARM_USER_DIR_BASE/ramdisk.tmp/ramdisk.tmp}" ]]
		then 	# Where it should be / This is the expected directory
			RAMDISK="${SWARM_RAMDISK_DIR:-$SWARM_USER_DIR_BASE}"
		else	# We need other testing
			for ramD in $(<"${SWARM_DIR_LIST}/os.dir.temp") ; do [[ -d "$ramD" ]] && RAMDISK="${ramD}/swarm.ramdisk" && break ; done
			${MKDIR:-\mkdir} "$RAMDISK"
		fi
		# Create ramdisk if not already existing
		${MOUNT:-\mount} | $GREP -q SWARM || ${MOUNT:-\mount} -t tmpfs -o size=4m SWARM "$RAMDISK"
		${CHMOD:-\chmod} 777 "$RAMDISK"
	}
	# Lets check wether we're in a X-session or on a TTY
	declare tmp_worker="${XDG_CONFIG_DIR:-$HOME/.config}"
	# $isRO is only set at this point if SWARM_RAMDISK=true is passed
	# Regardless, we must have all 3 as true in order to make a RAMDISK.
	if $isRO && $SWARM_RAMDISK && $isRoot
	then	$DEBUG_RAMDISK && set -x
		SWARM_RAMDISK_DIR="${SWARM_RAMDISK_DIR:-${SWARM_DIR_DATA}/ramdisk.tmp}"
		export SWARM_USER_DIR_BASE="$SWARM_RAMDISK_DIR"
		SWARMRC="${SWARM_RAMDISK_DIR}/swarmrc"
		swarm.sanity.ramdisk.create
		$DEBUG_RAMDISK && set +x
	elif $isRoot
	then	# Root with RW system ; or SWARM_RAMDISK=false (default)
		for tDir in  /var /usr/var
		do
			$isDir "$tDir" && \
				export SWARM_USER_DIR_BASE="$tDir" && \
				break
		done
		unset tDir
		# Only do this if no SWARM RC was passed
		if [[ -z "$SWARMRC" ]]
		then	# Check these dirs for possible SWARM configuration for root/admin user
			# /root was already checked against HOME
			# This is to provide fallback if machine is still booting
			for tDir in $HOME /etc
			do
				if $isDir "$tDir"
				then	# Just in case root as no $HOME
					# use /etc as fallback dir
					[[ "$tDir" == "/etc" ]] && \
						SWARMRC="$tDir/swarmrc" || \
						SWARMRC="$tDir/.swarmrc"
					break
				fi
			done
		fi
	else	# It's a user, make sure we save to the right place
		export SWARM_USER_DIR_BASE="${SWARM_USER_DIR_BASE:-$tmp_worker/swarm}"
	fi
	# Set vars for root and users, and reuse variables
	# Dirs
	# Do not use 'logs' but 'log' for /usr/var compatibility
	SWARM_LOG_DIR="${SWARM_USER_DIR_BASE}/log"
	SWARM_TMP_DIR="${SWARM_USER_DIR_BASE}/tmp"
	# Make sure the DIR's exist
	for tDir in "$SWARM_USER_DIR_BASE" "$SWARM_LOG_DIR" "$SWARM_TMP_DIR" "$SWARM_USER_LIBS"
	do
		if ! $isDir "$tDir" >/dev/zero
		then 	# It does not exist
			if ! $MKDIR "$tDir"
			then 	# Could not create the dir
				init.log.msg "$tDir :: $SWARM_MSG_PHRASE_COULDNOTCREATE"
				isRO=true
				init.log.msg "$tDir :: $SWARM_MSG_INIT_RO_SYSTEM"
				break
			fi
		fi
	done

	# Files
	SWARMRC="${SWARMRC:-$HOME/.swarmrc}"
	SWARM_TMP="${SWARM_TMP_DIR}/swarm-${SWARM_CODE}.tmp"
	SWARM_LOG="${SWARM_LOG_DIR}/swarm-all-internals.log"
	unset tmp_worker
#
# Prepare some SANITY functions
#
	swarm.sanity.userconfig.write() { #
	# Write the user configuration / SWARMRC
	#
		# Select default theme
		#shellcheck disable=SC2015
		$isRoot && \
			local this_theme="default-red" || \
			local this_theme="default-blue"
		for known in "$HOME/bin" \
				"$HOME/.bin" \
				"$HOME/local/bin" \
				"$HOME/.local/bin" \
				"$HOME/scripts"
		do
			if [[ -d "$known" ]]
			then
				SWARM_USER_DIR_SCRIPTS="$known"
				# Stop looking after first find
				break
			fi
		done
		[[ -z "$SWARM_USER_DIR_SCRIPTS" ]] && SWARM_USER_DIR_SCRIPTS="$HOME/bin"
		# Prepare for better customization
		SWARM_USER_DIR_LIBS="${SWARM_USER_DIR_LIBS:-${SWARM_USER_DIR_BASE}/libs}"
		SWARM_USER_DIR_CONF="${SWARM_USER_DIR_CONF:-${SWARM_USER_DIR_BASE}/conf}"
		$CAT > "$SWARMRC" <<EOF
#!/usr/bin/env bash
$SWARM_MSG_RC_HEADER
#-----------------------------------------------------------
$SWARM_MSG_RC_HEADING
	SWARM_INSTALLED_DIR="$SWARM_DIR_INSTALLED"

# $SWARM_MSG_WORD_SYSTEM $SWARM_MSG_WORD_INFORMATION
	DESKTOP="$DESKTOP"
	DISTRO="$DISTRO"
	BASED="$BASED"
	PKG_MGR="$PKG_MGR"

# $SWARM_MSG_RC_TITLE_USERINFO
	USER_NAME="$USER_NAME"
	USER_EMAIL="$USER @ ${HOST_NAME/localhost/cyberdyne\.systems}"
	USER_HOMEPAGE=""

# SWARM $SWARM_MSG_WORD_SETTINGS
	SWARM_THEME="$this_theme"
	SWARM_USER_DIR_BASE="$SWARM_USER_DIR_BASE"
	SWARM_USER_DIR_SCRIPTS="${SWARM_USER_DIR_SCRIPTS:-\$HOME/bin}"
	$SWARM_MSG_RC_SETTINGS
	SWARM_USER_DIR_LIBS="${SWARM_USER_DIR_LIBS:-${SWARM_USER_DIR_BASE}/libs}"
	SWARM_USER_DIR_CONF="${SWARM_USER_DIR_CONF:-${SWARM_USER_DIR_BASE}/conf}"
	SWARM_USER_CONF="$SWARM_USER_DIR_CONF/swarm-settings.conf"
	SWARM_USER_APPS="$SWARM_USER_DIR_CONF/apps.conf"

# SWARM $SWARM_MSG_RC_APPS_CLI
	CURLWGET="${CURLWGET}"
	MORELESS="${MORELESS}"

# SWARM $SWARM_MSG_WORD_DIRS
$SWARM_MSG_RC_DIRECTORIES
	SWARM_LOG_DIR="$SWARM_LOG_DIR"
	SWARM_TMP_DIR="$SWARM_TMP_DIR"

	# Feel free to move or rename the logfile
	SWARM_LOG="$SWARM_LOG"


# $SWARM_MSG_RC_TITLE_COREUTILS
$SWARM_MSG_RC_COREUTILS
	PRINTF="${PRINTF:-\printf}"
	ECHO="${ECHO:-\printf}"
	CAT="${CAT:-\cat}"
	AWK="${AWK:-\gawk}"
	GREP="${GREP:-\grep}"
	SED="${SED:-\sed}"
	DATE="${DATE:-\date}"
	READ="${READ:-\read}"
	SORT="${SORT:-\sort}"
	TPUT="${TPUT:-\tput}"
	TR="${TR:-\tr}"
	FOLD="${FOLD:-\fold}"
# File System
	FIND="${FIND:-\find}"
	LS="${LS:-\ls}"
	PWD_EXEC="${PWD_EXEC:-\pwd}"
	MKDIR_EXEC="${MKDIR_EXEC:-\mkdir}"
	MKDIR="${MKDIR:-swarm.util.mkdir}"
	CP_EXEC="${CP_EXEC:-\cp}"
	MV_EXEC="${MV_EXEC:-\mv}"
	RM_EXEC="${RM_EXEC:-\rm}"
	RMDIR_EXEC="${RMDIR_EXEC:-\rmdir}"
	TOUCH="${TOUCH:-\touch}"
	WHICH="swarm.util.which"
# Admin Tools
	PS=${PS:-\ps}
	ID="${ID:-\id}"
	WHOAMI="${WHOAMI:-\whoami}"
	CHMOD="${CHMOD:-\chmod}"
	MOUNT="${MOUNT:-\mount}"
	UMOUNT="${UMOUNT:-\umount}"
	READLINK="${READLINK:-\readlink}"
	# $SWARM_MSG_RC_SUOSUDO
	SU="${SU}"
	SUDO="${SUDO}"
EOF
		# Let the RC file refer to its own variables for easier micro management
		#shellcheck disable=SC2140
		$SED -i s,"${SWARM_USER_DIR_BASE}/","\${SWARM_USER_DIR_BASE}/",g "$SWARMRC"
		#shellcheck disable=SC2140
		$SED -i s,"${SWARM_USER_DIR_BASE}/log/","\${SWARM_LOG_DIR}/",g "$SWARMRC"
		#shellcheck disable=SC2140
		$SED -i s,"${SWARM_USER_DIR_BASE}/tmp/","\${SWARM_TMP_DIR}/",g  "$SWARMRC"
		#shellcheck disable=SC2140
		$SED -i s,"\${SWARM_USER_DIR_BASE}/log/","\${SWARM_LOG_DIR}/",g  "$SWARMRC"
		#shellcheck disable=SC2140
		$SED -i s,"${HOME}/","\${HOME}/",g  "$SWARMRC"
		# Update the information to copy basic configuration
		# so the user can customize the settings:
		source "$SWARMRC"

		$MKDIR "$SWARM_USER_DIR_CONF"
		$CP_EXEC "$SWARM_DIR_CONF/settings.conf" "$SWARM_USER_CONF"
		$TOUCH "$SWARM_USER_APPS"
		$CAT > "$SWARM_USER_APPS" <<-EOFA
		#!/usr/bin/env bash
		$SWARM_MSG_RC_HEADER
		# SWARM $SWARM_MSG_RC_APPS_GUI
		 	EDITOR_GUI="${EDITOR_GUI}"
		 	WEB_GUI="$WEB_GUI"
		 	FILEMGR_GUI="$FILEMGR_GUI"
		 	TERMINAL_GUI="$TERMINAL_GUI"
		# SWARM $SWARM_MSG_RC_APPS_CLI
		 	EDITOR_CLI="${EDITOR:-$EDITOR_CLI}"
		 	WEB_CLI="$WEB_CLI"
		 	FILEMGR_CLI="$FILEMGR_CLI"
EOFA
		return $?
	}
	#shellcheck disable=SC2120
	swarm.sanity.env.coreutils() { #
	# Verfy all core utils work as expected
	#
		#shellcheck disable=SC2086
		unset ${!tmp_*}
		local list_cmd="awk grep sed su sudo find tr ps id ls rmdir rm tput touch tail whoami hostname_exec date more less sort curl wget fold mkdir_exec rmdir_exec rm_exec mv_exec cp_exec chmod mount umount readlink"
		local worked=""
		local failed=""
		# Lets do it the easy way:
		for lc in $list_cmd
		do
			if tmp_=$( swarm.util.which "${lc/_exec}")  #>/dev/null &2>/dev/null &3>/dev/null
			then	worked="$tmp_ $worked"
				init.log "$SWARM_MSG_WORD_FOUND : ${lc^^}=${tmp_}"
				# Now export the expanded variables for usage
				export ${lc^^}="${tmp_}"
			else	failed="$lc $failed"
				init.log.msg "$SWARM_MSG_WORD_FOUND $SWARM_MSG_WORD_FOUND : $lc=${tmp_}"
			fi
		done
		# Return false if errors were encountered
		[[ -n "${failed}" ]] && \
			init.log.msg "$SWARM_MSG_WORD_FAILED: $failed" && \
			return 1
		# All good
		return 0
	}
	swarm.sanity.env() { #
	# Some basic internal variables
	# HOST_NAME, USER_NAME, USER_EMAIL, MORELESS and CURLWGET
		# Try to get hostname
		HOST_NAME=${HOSTNAME:-$($HOSTNAME_EXEC)} >>/dev/null
		# If still empty
		export HOST_NAME=${HOST_NAME:-localhost}
		# Try to get username
		export USER=${USER:-${SUDO_USER:-$($WHOAMI)}} >>/dev/null
		# Special handling for root username display
		#shellcheck disable=SC2015
		$isRoot && \
			export USER_NAME=".·: ROOT :·." || \
			export USER_NAME="$USER"
		export USER_EMAIL="$USER @ $HOST_NAME"
	#
	# Check for 'optional mandatories'
	#
		# Clear handler Variables
		MORELESS=""
		CURLWGET=""
		# Check individual vars
	#	MORE=$(swarm.util.which "${MORE:-more}")
	#	LESS=$(swarm.util.which "${LESS:-less}")
	#	CURL=$(swarm.util.which "${CURL:-curl}")
	#	WGET=$(swarm.util.which "${WGET:-wget}")
		# Is there anything available?
		if [[ -n "$MORE$LESS" ]]
		then	# Yes there is, what about my favorite?
			#shellcheck disable=SC2015
			[[ -n "$MORE" ]] && \
				export MORELESS="$MORE" || \
				export MORELESS="$LESS"
			init.log "$SWARM_MSG_WORD_SELECTED : MORELESS = $MORELESS"
		else	# Neiter MORE nor LESS is installed
			# Lets hope PAGER is set to someting working...
			# Otherwise, use CAT as fallback...
			init.log.msg "$SWARM_MSG_INIT_MORELESS_NFOUND ${PAGER:-\cat}"
			export MORELESS="${PAGER:-\cat}"
		fi
		# Either curl or wget was found
		if [[ -n "$CURL$WGET" ]]
		then	# Use curl as main app
			# use wget only if curl does not exist
			#shellcheck disable=SC2015
			[[ -z "$CURL" ]] && \
				export CURLWGET="$WGET" || \
				export CURLWGET="$CURL"
			init.log "$SWARM_MSG_WORD_SELECTED : CURLWGET = $CURLWGET"
		else	init.log.msg "$SWARM_MSG_INIT_CURLWGET_NFOUND"
		fi
		# Lets check for the most important output commands
		# Saving results to variables
		local RESULT=""
		RESULT="$(enable | $GREP -e echo -e printf -e cat -e read -e pwd)"
		local NUM=0
		NUM=$(echo "$RESULT" |wc -l)
		# Assign variable according to result
		if [[ 5 -eq "${NUM:-0}" ]]
		then	# Both are found
			ECHO="builtin echo"
			PRINTF="builtin printf"
			READ="builtin read"
			CAT="builtin cat"
			PWD_EXEC="builtin pwd"
		else	# Handle each on its own
			echo "$RESULT" | $GREP -q echo && \
				ECHO="builtin echo" || \
				ECHO="swarm.util.echo"
			echo "$RESULT" | $GREP -q printf && \
				PRINTF="builtin printf" || \
				PRINTF="$(swarm.util.which printf)"
			echo "$RESULT" | $GREP -q read && \
				READ="builtin read" || \
				READ="$(swarm.util.which read)"
			echo "$RESULT" | $GREP -q cat && \
				CAT="builtin cat" || \
				CAT="$(swarm.util.which cat)"
			echo "$RESULT" | $GREP -q pwd && \
				PWD_EXEC="builtin pwd" || \
				PWD_EXEC="$(swarm.util.which pwd)"
		fi

		for thisVar in ECHO PRINTF READ CAT PWD_EXEC
		do
			init.log "$SWARM_MSG_WORD_SELECTED : $thisVar = ${!thisVar}"
		done
		export ECHO PRINTF READ CAT PWD_EXEC
	}
#
# Make sure we can differ the date in the log,
# if this fails, no write access, RO?
#
	# Only check log if loging is enabled (default:true)
	if ${doLog:-true}
	then	# Since the paths are created before
		init.log.check && isRO=false || isRO=true
		export isRO
	fi
#
# This is checked only the first time
#
	if [[ ! -f "$SWARMRC" ]]
	then
		#shellcheck disable=SC2119
		swarm.sanity.env.coreutils
		swarm.sanity.env
		_swarm.os.install.get_pkg_mgr
		swarm.sanity.userconfig.write
		# Time to write the paths to the log file, just in case
		init.log "PWD=${PWD:-$($PWD_EXEC)}"
		init.log "SWARM_DIR_ROOT=$SWARM_DIR_ROOT"
		init.log "SWARMRC=$SWARMRC"
		init.log "SWARM_RAMDISK=$SWARM_RAMDISK"
		init.log "SWARM_RAMDISK_DIR=$SWARM_RAMDISK_DIR"
		init.log "isRO=$isRO"
		init.log "DISTRO=$DISTRO"
		init.log "BASED=$BASED"
		init.log "DESKTOP=$DESKTOP"
		init.log "PKG_MGR=$PKG_MGR"
		init.log " ----------- Just in case ----------- "
		init.log "uname = $(uname -a)"
		init.log "Systemroot ::
$($LS -1 /)"
		init.log " ----------- Just in case ----------- "
	fi
#
# Environment Sanity checks
#
