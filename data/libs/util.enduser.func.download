#!/usr/bin/env bash
download() { # [-f|--full] [-c] [-s] [-o FILENAME] [-d|--dir DIR] URL [URL2 ... URL99 ...]
#
#
	#ME="$FUNCNAME"
	swarm.protect "$@" && exit 1
	#set -x
#	Created: 2013.09.13
#	Changed:2015.11.07
#	TUI -> SWARM: 2021.01.03
#
#
#	Variable defaults
#
	script_version=0.9.2
	DIR_TEMP="${SWARM_TMP_DIR:-${TMPDIR:-${HOME:-/root}/.cache}}"
	FILE_TEMP="$DIR_TEMP/swarm.download.$$.status"
	FILE_CMD="$DIR_TEMP/swarm.download.$$.cmd"
	DEST=""
	doShowFullPath=false
	str_fixed_output=""
	swarm.util.mkdir "$DIR_TEMP"  2>/dev/null
	LIST_APPS="wget curl"
	[ -z "$(which $CURLWGET 2>/dev/null)" ] && \
		CURLWGET="$(echo ${LIST_APP/$CURLWGET})"
	TERM="${TERM:-GNU\057Linux}"
	swarm.util.isDir "$DIR_TEMP"
	touch "$FILE_TEMP"
#
#	Messages
#
	MSG_INIT_ACT="${SWARM_MSG_DOWNLOAD_INIT}..."
	MSG_ACT_ING="${SWARM_MSG_WORD_DOWNLOADING}..."
	MSG_ACT_ED="$SWARM_MSG_WORD_DOWNLOADED"
	MSG_NOTFOUND="$SWARM_MSG_INIT_CURLWGET_NFOUND"
	MSG_SELECT="$SWARM_MSG_DOWNLOAD_SELECT"
	MSG_INSTALL_ING="$SWARM_MSG_WORD_INSTALLING"
	MSG_INSTALL_ED="$SWARM_MSG_WORD_INSTALLED"
#
#	Argument handling
#
	trap "RET=$?;rm -f $FILE_TEMP $FILE_CMD" INT ABRT QUIT KILL
	# Set empty default options:
	case "$CURLWGET" in
	*curl)	OPT_O="-o"
		#OPT_Q="-s"
		#OPT_C=""
		;;
	*wget)	OPT_O="-O"
		#OPT_Q="-q"
		#OPT_C="-c"
		;;
	esac
	# Catch options curl-wget crosswise
	while :;
	do
		case "$1" in
		-[oO])		str_fixed_output="$2"
				shift 2
				;;
		-[sq])		case "$CURLWGET" in
				curl)	OPT_Q="-s" ;;
				wget)	OPT_Q="-q" ;;
				esac
				shift
				;;
		"-c")		case "$CURLWGET" in
				curl)	OPT_C="" ;;
				wget)	OPT_C="-c" ;;
				esac
				shift
				;;
		"-d"|"--dir")	DEST="$1"
				shift
				;;
		"-f"|"--full")	doShowFullPath=true
				shift
				;;
		-*)		# Wrong option passed
				swarm.help.usage download
				return 0
				;;
		""|*tp:*)	# Proper handling, either URL or missing
				break ;;
		esac
	done
#
#	Verify there are URL's passed
#
	ARGS=( "${@}" )
	# Exit script if nothing is passed to handle:
	[[ -z "${ARGS[*]}" ]] && \
		swarm.help.usage download && \
		return 1
#
#	Funcrtion
#
	curl_get_filesize() {
	#
	#
		max_ret=$($AWK -vRS=$'\r' 'END{NR=3}END{print $2}' "$FILE_TEMP")
		case ${max_ret:(-1)} in
		G)	multi=$(( 1024 * 1024 * 1024 ))	;;
		M)	multi=$(( 1024 * 1024 ))	;;
		K)	multi=1024	;;
		B)	multi=1	;;
		esac

		max_val=$( echo "${max_ret:0:1}" "$multi" | awk '{ print ($1*$2)}' )
		echo ${max_val:-0}
	}
#
#	Action
#
	for URL in "${ARGS[@]}"
	do 	THIS="${URL##*/}"
		# If DEST is given, prefix this, or use PWD if empty
		# However, the very first file might get a fixed output
		out_string="${str_fixed_output:-${DEST:-$PWD}}/$THIS"
		[[ -n "$str_fixed_output" ]] && str_fixed_output=""
		# How should it be displayed to the end user?
		$doShowFullPath && \
			str_File="$out_string" || \
			str_File="$THIS"
		# Does the file exist already?
		if [[ -f "$out_string" ]]
		then	# Overwrite, skip or new download?
			status 111 "$SWARM_MSG_PHRASE_FILE_EXISTS" "$out_string"
			# Let the user pick the action
			local tmp_val="$(pick $SWARM_MSG_WORD_SKIP $SWARM_MSG_WORD_OVERWRITE $SWARM_MSG_WORD_NEW)"
			# Now decide according to user selection
			case "$tmp_val" in
			"$SWARM_MSG_WORD_SKIP")
				status $RET_SKIP "$str_File"
				continue
				;;
			"$SWARM_MSG_WORD_NEW")
				out_string=$(swarm.str.genfilename "$out_string")
				THIS=$(swarm.str.genfilename "$THIS")
				$doShowFullPath && \
					str_File="$out_string" || \
					str_File="$THIS"
				;;
			esac
		fi

		# Initialize download - user output only
		status -r 2 "$MSG_INIT_ACT" #"$WORK"
		>$FILE_TEMP
		echo "LC_ALL=C $CURLWGET $OPT_C $OPT_O \"$out_string\" \"$URL\" 1>/dev/null 2>$FILE_TEMP" > "$FILE_CMD"
		chmod +x "$FILE_CMD"
		(
			"$FILE_CMD" 2>/dev/zero
		) & >/dev/zero 2>/dev/zero
		local lPID=$!

		str_left="$MSG_ACT_ING"
		str_middle="$THIS ($tmp_size)"	; len=${#str_middle}

		MAXVAL=$(curl_get_filesize)
		# While lPID found, assume its till downloading...
		while ps $lPID > /dev/zero #|$GREP $CURLWGET
		do	[[ -f "$THIS" ]] && \
				tmp_size="($($LS -hl |$GREP $THIS |$AWK '{print $5}'))"
			COLUMNS="$($TPUT cols)"
			str_middle="$THIS $tmp_size"
			[ 0 -ne "${MAXVAL:-0}" ] && \
				size_bar="$($LS -l |$GREP $THIS |$AWK '{print $5}')" \
				opt_bar="-b -m $MAXVAL -c $size_bar" || \
				opt_bar=""

			bar $opt_bar "$str_left ${str_middle}"
			sleep 1
			case ${CURLWGET,,} in
			curl*)	MAXVAL=$(curl_get_filesize)
				;;
			esac
		done
		sleep 0.5
		[[ -f "$out_string" ]]
		status $? "${MSG_ACT_ED}: ${str_File}"
	done
}
