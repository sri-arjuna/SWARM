#!/usr/bin/env bash
swarm.fs.get_waiting() { # KILOBYTES
# Returns the amount of seconds to wait
#
	[[ -z "$1" ]] && $ECHO 0.3 && return
	if [[ $1 -lt 1000100 ]]
	then	# Its less than 1 mb
		waiting=0.1
	elif [[ $1 -lt 100100100 ]]
	then	# Its less than 100 mb
		waiting=0.3
	elif [[ $1 -lt 1000100100 ]]
	then	# Its less than 1 gb
		waiting=0.4
	elif [[ $1 -lt 10100100100 ]]
	then	# Its less than 10 gb
		waiting=0.5
	else	# for everything higher
		waiting=0.9
	fi
	$ECHO "$waiting"
}
swarm.util.tar() { # DIR1 DIR2 ...
# Compresses passed DIRs according to your preferences
# See ~/.config/swarm/cong/
	# TODO
	#shellcheck disable=SC2034
	local FILE_TEMP="$SWARM_TMP_DIR/tar.status"
	local FILE_CMD="$SWARM_TMP_DIR/tar.bgjob"
	local TMP=$SWARM_TMP
	touch "$TMP"
	local DEST=""
	local showBar=false
	local doExtract=false
	local beVerbose=false
#
#	Variable handling
#
	for opt in "${@}"
	do	case "$opt" in
		b)	showBar=true
			shift
			;;
		x)	doExtract=true
			shift
			;;
		v)	beVerbose=true
			shift
			;;
		"")	# shellcheck disable=SC2184
			unset ARGS[@]
			ARGS[0]="$SWARM_MSG_TAR_ENTER_PATH"
			;;
		esac
	done
	ARGS=("${@}")
#
#	Display
#
	for FOLDER in "${ARGS[@]}"
	do 	status 2 "$SWARM_MSG_WORD_READING..."
		THIS="${FOLDER##*/}"
		PWD_ORG="$($PWD_EXEC)"

		#set -x
		if $doExtract
		then	if [ -f "$FOLDER" ]
			then	# shellcheck disable=SC2016
				size_tarball=$($LS -l "$FOLDER"|$AWK '{print $5}')
				[ -z "$size_tarball" ] && printe  "$SWARM_MSG_WORD_READING $FOLDER!" && return

				#list_tarball=($(tar tf "$FOLDER"))
				touch "$SWARM_TMP".2
				echo "${TAR_EXEC:-tar} tf \"$FOLDER\" > \"$SWARM_TMP\".2" > "$SWARM_TMP"
				$SHELL "$SWARM_TMP" &
				pid=$!
				#while ps | $GREP -q tar
				while ps | $GREP -q $pid
				do	bar "$SWARM_MSG_WORD_READING $FOLDER..."
					sleep 0.3
				done
				list_tarball=( $($CAT "$SWARM_TMP.2") )
				LAST=""
				CURRENT=""
				$showBar && bar -r -b -m "$size_tarball" -i $$
				RET=0

				if ! $beVerbose
				then	${TAR_EXEC:-tar} axf "$FOLDER"
					RET=$?
				else	(${TAR_EXEC:-tar} axf "$FOLDER" ; $ECHO $? > "$SWARM_TMP") &
					PID=$!
					COUNT=0
					while ps | $GREP -q $PID
					do	# Parse list for current output file
						for entry in "${list_tarball[@]}"
						do	if [ -e "$entry" ]
							then	[ -z "$CURRENT" ] && \
									CURRENT="$entry"
								[ ! -z "$LAST" ] && \
									[ ! "$LAST" = "$CURRENT" ] && \
									((++COUNT))
								break
							fi
						done

						#shellcheck disable=SC2016
						[ -e "$CURRENT" ] && \
							size_output=$($LS -l "$CURRENT"|$AWK '{print $5}') || \
							size_output=0
						if $showBar
						then	bar -bi $$ -m "$size_tarball" -c "$size_output" "$EXTRACTING \"$CURRENT\"..."
						else	bar -i $$ -m "${#list_tarball[@]}" -c "$COUNT" "$EXTRACTING \"$FOLDER\"..."
						fi
						sleep 0.7
					done
					RET=$(<"$SWARM_TMP")
				fi
			else	status 1  "$FOLDER : $SWARM_MSG_PHRASE_DIRNOTFOUND"
			fi
			status "$RET" "$SWARM_MSG_WORD_EXTRACTED: $FOLDER"
		else	DEST=$(swarm.str.genfilename "$($PWD_EXEC)/$THIS.$TAR_EXT")
			status -r 2 "$SWARM_MSG_WORD_READING..."
			$ECHO -e "tar -ac --one-file-system -f \"$DEST\" \"$THIS\" 2>&1 > /dev/null > $TMP" > "$FILE_CMD"
			#shellcheck disable=SC2164 disable=2086
			$CD "$(dirname $FOLDER)"
			$CHMOD +x "$FILE_CMD"

			# What is the org file size?
			if [ -d "$FOLDER" ]
			then	org_size=$($DU "$FOLDER")
			else	#shellcheck disable=SC2016
				org_size=$($LS -l "$FOLDER"|$AWK '{print $5}')
			fi

			$showBar && bar -r -b -m "$org_size" -i $$

			"$FILE_CMD" &
			pid=$!
			sleep 0.5
			while [ ! "" = "$(ps|$GREP $pid)" ]
			do	#shellcheck disable=SC2016
				[ -f "$DEST" ] && \
					tmp_display_size="$($LS -hl "$DEST" |$AWK '{print $5}')" && \
					tmp_size="$($LS -l "$DEST" |$AWK '{print $5}')"|| \
					tmp_size="0 bytes"
				if $showBar
				then	bar -b -m "$org_size" -i $$ -c "$tmp_size" "$SWARM_MSG_WORD_COMPRESSING $THIS ($tmp_display_size)"
			else	bar "$SWARM_MSG_WORD_COMPRESSING..." "$THIS ($tmp_display_size)"
				fi
				sleep 0.7
			done
			#shellcheck disable=SC2164
			$CD "$PWD_ORG"
			[ -f "$DEST" ]
			status $? "$SWARM_MSG_WORD_COMPRESSED: $DEST"
			RET=$?
		fi
	done
	return $RET
}
swarm.util.cp() { # [-f -l -q -t TARGET] SOURCE [TARGET]
# Copies SOURCE to TARGET
# Returns 1 if TARGET-dir does not exist
	# shellcheck disable=SC2128
	[[ -z "${@}" ]] && swarm.help.usage "$FUNCNAME" && return 1
	#local force_Overwrite=false
	local show_Longnames=false
	local cp_target=""
	local beVerbose=true
	local optargs=""
# Catch arguments
	for opt in "${@}"
	do	case "${opt}" in
		"-f") 	#force_Overwrite=true
			optargs="-f"
			shift
			;;
		"-l")	show_Longnames=true ; shift	;;
		"-t")	cp_target="$2" ; shift 2	;;
		"-q")	beVerbose=false ; shift		;;
		"--")	# Do Pipe
			# shellcheck disable=SC2128
			[[ -z "$cp_target" ]] && \
				swarm.help.manpage "$FUNCNAME" && \
				return 1
			# shellcheck disable=SC2162
			while read line
			do
				# shellcheck disable=SC2086
				$CP $optargs "$line" "$cp_target"
			done
			return 0
			;;
		*)	[[ "-" = "${opt:0:1}" ]] && \
				optargs+=" $opt" && shift	;;
		esac
	done
# Make sure target is set
	local ARGS=("${@}")
	# If TARGET was not passed as option,
	# take last argument for it
	if [[ -z "$cp_target" ]]
	then
		local tID=$(( ${#ARGS[@]} - 1 ))
		cp_target="${ARGS[$tID]}"
		# shellcheck disable=SC2184
		unset ARGS[$tID]
	fi
# Preparations
	local MAX="${#ARGS[@]}"
	local COUNT=0
	#[[ -d "$cp_target" ]] || [[ -f "$cp_target" ]]

# Action
	if $beVerbose
	then	# Show each file on its own line
		for src in "${ARGS[@]}"
		do
			$show_Longnames && src_show="$src" || src_show="${src##*/}"
			bar -m "$MAX" -c "$COUNT" "$SWARM_MSG_WORD_COPYING : $src"
			# shellcheck disable=SC2086
			$CP $optargs "$src_show" "$cp_target"
			#$PRINTF "$POS_END\n"
			status -c $? "$SWARM_MSG_WORD_COPIED $SWARM_MSG_WORD_FILE: ${src_show} $SWARM_MSG_WORD_FROMTO_TO $cp_target"
			((COUNT++))
		done
	else	# Show all in one line;
		bar "$SWARM_MSG_WORD_COPYING $SWARM_MSG_WORD_FILES"
		# shellcheck disable=SC2086
		$CP $optargs "${ARGS[@]}" "$cp_target"
		#$PRINTF "$POS_END\n"
		status $? "$SWARM_MSG_WORD_COPIED $MAX $SWARM_MSG_WORD_FILES"
	fi
}
swarm.util.cd() { # DIR
#
#
	if [[ 1 -ne "${#@}" ]]
	then	# Expecting exactly 1 argument, anything else is wrong usage:
		swarm.help.usage "${FUNCNAME[@]}"
		return 1
	fi
	if [[ -d "$1" ]]
	then	cd "$1"
		return 0
	else	# Dir does not exist, what is wrong?
		title "${FUNCNAME[@]}: $1"
		if [[ "/" == "${1:0:1}" ]]
		then	# It does have a leading /
			printe "$SWARM_MSG_WORD_PASSED:" "$1"
			printe "$SWARN_MSG_WORD_EXPECTED:" "$1"
			if yesno "$SWARM_MSG_WORD_CREATE: $1"
			then 	if $MKDIR "$1"
				then	cd "$1"
				else 	status $? "$SWARM_MSG_PHRASE_COULDNOTCREATE:" "$1"
					return 1
				fi
				return 0
			else 	return 1
			fi
		else	# It is expecting a sub dir
			printe "$SWARM_MSG_WORD_PASSED:" "$1"
			printe "$SWARM_MSG_WORD_CURRENT $SWARM_MSG_WORD_DIR:" "$PWD"
			printe "$SWARN_MSG_WORD_EXPECTED:" "$PWD/$1"
			if yesno "$SWARM_MSG_WORD_CREATE: $PWD/$1"
			then 	if $MKDIR "$PWD/$1"
				then	cd "$1"
				else 	status $? "$SWARM_MSG_PHRASE_COULDNOTCREATE:" "$PWD/$1"
					return 1
				fi
				return 0
			else 	return 1
			fi
		fi
	fi
}
swarm.util.rm() { # FILE1 DIR2
# Deletes files and dirs recurisvly.
# Ask before removing a directory.
	local isVerbose=false
	if [[ "-v" == "$1" ]]
	then	isVerbose=true
		shift
	fi
	if [[ -z "$1" ]]
	then	# Expecting at least one argument
		swarm.help.usage "${FUNCNAME[@]}"
		return 1
	fi
	local args="" msg="" rmAsk=false RET=0
	for item in "${@}"
	do
		rmAsk=false
		if [[ -f "$item" ]]
		then 	obj="$SWARM_MSG_WORD_FILE"
		elif [[ -L "$item" ]]
		then 	obj="$SWARM_MSG_WORD_FILE"
		elif [[ -d "$item" ]]
		then	# Ask in case of folders
			rmAsk=true
			obj="$SWARM_MSG_WORD_DIR"
			args="-fr"
		else	status 1 "$SWARM_MSG_PHRASE_FILENOTFOUND: $item"
			rmAsk=false
			continue
		fi
		if $rmAsk
		then	yesno "$SWARM_MSG_WORD_DELETE $obj: $item?" || continue
		fi
		msg="$SWARM_MSG_WORD_DELETED $obj $item"
		$RM_EXEC $args "$item" && init.log "$msg"
		RET=$?
		$isVerbose && status "$RET" "$msg"
	done
}
