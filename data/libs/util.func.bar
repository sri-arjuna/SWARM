#!/usr/bin/env bash
bar()  { # [options] [MESSAGE]
# Prints a progress bar
#
	# internals
	local TYPE=""		# Start with no display mode
	# shellcheck disable=SC1003
	local INDI=( '/' '-' '\' '|' )	# For asynchronus display
	# id file?
	local ID_CUR="$$"	# -i ID storage id
	local ID=""		# -i ID storage id
	# bols
	local CLEARLINE=false	# Clear line between display calls?
	local hadOpts=false	# Shift only if it had opts
	local doReset=false	# Reset the ID file?
	local doBar=false
	local longBar=false	# Show (& calc) the STATUS (procent)
	local hasID=false
	# opts
	local MAX=""
	local VAL #="1"		# This is used as index for the dash animation
	# Display
	local PROGRESS=""
	local STATUS=""
	local MESSAGE=""
	local STR_COLORS_RAW
#
#	Functions
#
	#shellcheck disable=SC2120
	_bar.simple_status() {
	# Generates a single string to represent the actual task/case
	#
		tmp=""
		[ ! -z "$MAX" ] && tmp="NUM"
		$doBar && [ ! -z "$MAX" ] && tmp="BAR"
		$ECHO "${tmp:-DASH}"
	}
	_bar.reset_tmp() { # ID
	# Resets the counter according to passed ID
	# Needs to be one, otherwise last item is too low
		if "$hasID"
		then	SWARM_PROGRESS_BAR_IDS[$ID]=1
		else	SWARM_PROGRESS_BAR_IDS[$ID_CUR]=1
		fi
		export SWARM_PROGRESS_BAR_IDS
	}
	_bar.save_tmp() { # VAL
	# Saves VAL in the temp file according to passed id
	#
		[ -z "$1" ] && return 1
		if "$hasID"
		then	SWARM_PROGRESS_BAR_IDS[$ID]="$1"
		else	SWARM_PROGRESS_BAR_IDS[$ID_CUR]="$1"
		fi
		export SWARM_PROGRESS_BAR_IDS
	}
	#shellcheck disable=SC2120
	_bar.read_tmp() {
	# Reads VAL in the temp file according to passed id
	# Returns VAL
		if "$hasID"
		then	$ECHO "${SWARM_PROGRESS_BAR_IDS[$ID]}"
		else	$ECHO "${SWARM_PROGRESS_BAR_IDS[$ID_CUR]}"
		fi
	}
#
#	Catching Arguments
#
	while :
	do 	case "$1" in
		-B)	BAR="$2"
			hadOpts=true
			;;
		-b)	doBar=true
			;;
		-c)	VAL="$2"
			hadOpts=true
			;;
		-C)	CLEARLINE=true
			;;
		--color)
			STR_COLORS_RAW="$2"
			# Vars
			local c=0
			local str_color
			declare -ag SWARM_BAR_COLORS
			declare -ag SWARM_BAR_VALUE
			# Parse values
			while $READ -r item
			do
				# shellcheck disable=SC2154
				str_color=$($ECHO "${item}" | $TR -d [[:digit:]])
				str_value=$($ECHO "${item}" | $TR -d [[:alpha:]])
				SWARM_BAR_COLORS=($str_color)
				SWARM_BAR_VALUE=($str_value)
				((c++))
			done<<<"$($ECHO "$STR_COLORS_RAW" | $SED s/','/'\n'/g )"
			hadOpts=true
			;;
		-i)	ID="$2"
			hasID=true
			hadOpts=true
			;;
		-p)	longBar=true
			;;
		-m)	MAX="$2"
			hadOpts=true
			;;
		-r)	doReset=true
			;;
		--) 	shift ; break ;;
		--help|-?)
			# shellcheck disable=SC2128
			swarm.help.usage "$FUNCNAME"
			return "${RET_HELP:-99}"
			;;
		*)	break ;;
		esac
		# shellcheck disable=SC2015
		$hadOpts && \
			shift 2 || \
			shift 1
		hadOpts=false
	done
#
#	Check for all required options
#
	MESSAGE="$1"
	TYPE=$(_bar.simple_status)
	VAL="${VAL:-$(_bar.read_tmp)}"
#
#	Something quick?
#
	$doReset && _bar.reset_tmp && VAL="$(_bar.read_tmp)"
	[[ -z "$VAL" ]] && VAL=1 && _bar.reset_tmp
#
#	Prepare required tasks from options
#
	case "${TYPE^^}" in
	DASH)
		_bar.save_tmp "$(( VAL + 1 ))"
		;;
	BAR)
		if [ -z "$MAX" ] || [ -z "$VAL" ]
		then	# Improper handling
			swarm.help.usage "${FUNCNAME[@]}"
			return 1
		fi
		_bar.save_tmp "$(( VAL + 1 ))"
	esac
#
#	Generate output string, and save values
#
	#swarm.update.geometry
	POS=""
	case "${TYPE}" in
	DASH)	# Regular animated dash
		[[ "$VAL" -gt 3 ]] && VAL=0
		n=$(( WIDTH - ${#BORDER_LEFT} - 8 ))
		POS="\033[${n}G"
		POS=""

		case $VAL in
		0|1|2)	STATUS="${POS}[  ${INDI[$VAL]}   ]"	;;
		# Below is a failback setting (due to: injection protection)
		3)	STATUS=$($PRINTF "${POS}[  \174   ]")
			;;
		esac
		;;
	NUM)	# Show increments number
		# shellcheck disable=SC2128
		[[ $VAL -gt $MAX ]] && \
			swarm.help.usage "$FUNCNAME"
		STATUS="[ $VAL / $MAX ]"
		;;
	BAR)	# Show pro-cent only if wanted
		fixer_fix=0
		if "$longBar"
		then	# Show also procent ($STATUS)
			# shellcheck disable=SC2016
			procent=$( $ECHO "$MAX" "$VAL" | $AWK '{print (100/$1*$2) }' )
			[ -z "$MESSAGE" ] && fixer_fix=0 || fixer_fix=5	# Does this depend on $WIDTH?

			# How many procent?
			pro="${procent/.*/}"
			[ "$pro" -gt 100 ] && \
				pro=100
			# shellcheck disable=SC2034
			[ "$pro" -ne 100 ] && \
				cent=$( while IFS='.' $READ -r P C;do [ -z "$C" ] && $ECHO 00 || $ECHO "$C";done<<<"$procent") && \
				cent="${cent:0:2}" || \
				cent=00
			case ${#pro} in
			1)	fixer=13 ;;
			2)	fixer=14 ;;
			3)	fixer=15 ;;
			esac
			# shellcheck disable=SC2154
			length=$(( numEND - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - 5 - fixer - fixer_fix  ))
			STATUS="[ ${pro}.${cent}%% ]"
			# shellcheck disable=SC2016
			len=$( $ECHO "$length" "$procent" | $AWK '{print ($1/100*$2) }' )
		else	STATUS=""
			[ -z "$MESSAGE" ] && fixer_fix=7	# Does this depend on $WIDTH?
			# The length that is available to print bars
			[ -z "$MESSAGE" ] && \
				fixer=16 || \
				fixer=14
			length=$(( numEND - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - fixer - fixer_fix ))
			# shellcheck disable=SC2016
			len=$( $ECHO "$length" "$MAX" "$VAL" | $AWK '{print ($1/$2*$3) }' )
		fi

		# Colorize?
		if [[ -z "${SWARM_BAR_COLORS[@]}" ]]
		then 	## No color = default
			bars=$($PRINTF '%*s' "${len/.*}")
			# shellcheck disable=SC2140
			bars=$($ECHO "$bars"|$SED s," ","\\$BAR",g)
		else 	## With Color = Experimental / Dismiss ??
			# shellcheck disable=SC2154
			local bars_counter=$(( numEND - ( 2 * identRight ) ))
			local bars_curret=0
			local arr_count=0
			local clr_now="${SWARM_BAR_COLORS[0]}"
			local clr_color=""
			clr_color=$(swarm.color.fg "$clr_now")
			local num_next="${SWARM_BAR_VALUE[0]}"
			bars=""
			while [[ $bars_curret -lt $bars_counter ]]
			do
				# shellcheck disable=SC2154
				bars+="${clr_color}${BAR}${c_reset}"
				((bars_curret++))
				[[ $num_next -lt $bars_curret ]] && \
					((arr_count++)) && \
					clr_now="${SWARM_BAR_COLORS[$arr_count]}" && \
					clr_color=$(swarm.color.fg "$clr_now") && \
					num_next="${SWARM_BAR_VALUE[$arr_count]}"
			done
		#	set +x
		fi
		bar_total="$($PRINTF '%*s' ${length/.*})"
		bar_total="[${bars}${bar_total:${#bars}}]"
		PROGRESS="$bar_total"
		;;
		*)	status 1 "Error, progressbar type ($TYPE) is unhandled"
			return $?
		;;
	esac
#
#	Display & Action
#
	$CLEARLINE && $PRINTF "\e[2K"
	swarm.print.border
	case "${TYPE^^}" in
	NUM)
		swarm.print.text "$MESSAGE" "" "$STATUS"
		;;
	DASH)
		swarm.print.text "$MESSAGE" "" "$STATUS"
		((VAL++))
		if [[ "${TYPE^^}" == "DASH" ]]
		then
			[[ $VAL -ge 4 ]] && VAL=1
		fi
		_bar.save_tmp $VAL
		;;
	BAR)	if $longBar
		then	if [[ -z "$MESSAGE" ]]
		 	then	# No message
				swarm.print.text "$PROGRESS" "" "$STATUS"
			else 	# With message
				swarm.print.text "$MESSAGE" "" "${PROGRESS}${STATUS}"
			fi
		elif [[ -z "$MESSAGE" ]]
		then 	# No message
			# shellcheck disable=SC2154
			$PRINTF "$posLEFT${PROGRESS}\n"
		else 	# With message
			swarm.print.text "$MESSAGE" "" "${PROGRESS}"
		fi
		;;
	esac
}
