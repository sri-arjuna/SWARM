#!/usr/bin/env bash
#
# Prepare variables
#

#
# Theme's
#
	swarm.theme.update() { # THEME_NAME
	# This loads the provided THEME_NAME
	#
		# This an assigned array containg the theme related data
		# Lets make sure each theme gets loaded into clear memory
		unset SWARM_THEME_DATA[@]	# Use terminal / console / vtr default settings as base
		# These are it's assingments
		swarm_list_theme_options="border-left border-right color-font color-back read select"
		# Lets start fresh
		declare -GA SWARM_THEME_DATA
		local ret=false

		# Always use the user themes first
		# in case someone wants to pseudo-overwrite the default themes
		for there in "$SWARM_USER_CONFIG/themes" "$SWARM_DIR_THEMES"
		do
			# check in each dir
			if [[ -d "$there" ]]
			then	if [[ -f "$there/$1" ]]
					then	source "$there/$1"
							ret=$?
					fi
			fi
		done

		# Check if something went wrong
		if [[ $ret != 0 ]]
		then	# The theme could not be Found
				# Lets fallback to default
				source "$SWARM_DIR_THEMES/default-blue"
				init.log.msg "$SWARM_MSG_INIT_THEME : $1"
		fi
		# Export the values now
		export SWARM_THEME_DATA #[@]
		# Now, return
		return $ret
	}
	swarm.theme.list() {
	# Lists all themes available
	# Includes SWARM_USER_CONFIG/themes and SWARM_DIR_THEMES alike
		local d f
		for d in "$SWARM_USER_CONFIG/themes/" "$SWARM_DIR_THEMES/"
		do
			# Check if path exists and handle each file for its own
			[[ -d "$d" ]] && \
				for f in $($LS "$d")
				do
					# Output only if it really is a file
					[[ -f "$f" ]] && $PRINTF '%s\n' "${f##*/}"
				done
		done
	}
	swarm.init.theme () { #
	# Initiate the theme for the first time
	# This is only a wrapper for the initial loading.
		swarm.theme.update ${SWARM_THEME:-default-blue}
	}
#
# Visual outputs - core essentials
#
	swarm.color.list() { #
	# Simply lists the color names that can be used in SWARM
	#
		local raw=$($GREP "cb_" ${SWARM_DIR_DATA}/core/colors.conf | $SED s,"cb_","",g ) #| $SED s,"="," ",g | $AWK ' $1'
		for r in $raw
		do
			$PRINTF '%s\n' "${r/=*}"
		done
	}
	swarm.color.bg() {  # COLORNAME
	# Returns the color code of provided COLORNAME
	#
		local str=cb_${1:-blue}
		eval $PRINTF \$"${str}"
	}
	swarm.color.fg() {  # COLORNAME
	# Returns the color code of provided COLORNAME
	#
		local str=cf_${1:-white}
		eval $PRINTF \$"${str}"
	}
	swarm.print.goto() { # NUM
	# Returns the positioncode for passed NUM location
	# Returns number 0 if no argument is passed
		$PRINTF "\33[${1:-0}G"
	}
	swarm.print.border() { # MODE
	# Prints basic border for all lines, this should only be executed if COLUMNS > 25
	# The calling function has to handle the NEWLINE required by 'printe' (-E)
		local MODE="" #name=""
		case "${1/-}" in
		e|p)	MODE="basic"	;;
		h)		MODE="header"	;;
		t)		MODE="title"	;;
		esac
		# Makes no sense to print visuals on such short lines
		[[ ${COLUMNS} -lt 25 ]] && return 1
#set -x
		# Set basic values
		local BORDER_LEFT="${SWARM_THEME_DATA[border-left]}" BORDER_RIGHT="${SWARM_THEME_DATA[border-right]}"
		local clrFRONT="${SWARM_THEME_DATA[color-front]}" clrBACK="${SWARM_THEME_DATA[color-back]}"
		local clrCL="\e[2K"
		c_front=$(swarm.color.fg ${SWARM_THEME_DATA[color-front]})
		c_back=$(swarm.color.bg ${SWARM_THEME_DATA[color-back]})

		# Check if border-right was set:
		[ -z "$BORDER_RIGHT" ] && \
			for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done

		# Now prepare the seperate handling
		PRINT_RIGHT_OUT="$c_reset"
		case "$MODE" in
			"basic")
					PRINT_LEFT_IN="$c_reset"
					PRINT_LEFT_OUT="${clrCL}${c_front}${c_back}"
					PRINT_RIGHT_IN="${c_front}${c_back}"
					pos_cor_num=0
					;;
			"header")
					local filler_num=$(( $(( $COLUMNS / 2 * 2)) - $(( ${#BORDER_RIGHT} * 2 )) + 2 ))
					local filler_str=$($PRINTF "%*s" ${filler_num})
					PRINT_LEFT_IN="$filler_str" #$c_reset"
					PRINT_LEFT_OUT="${clrCL}${c_front}${c_back}"
					PRINT_RIGHT_IN="" #${c_front}${c_back}"
					pos_cor_num=0
					;;
			"title")
					local filler_num=$(( $(( $COLUMNS / 2 * 2)) - $(( ${#BORDER_RIGHT} * 2 )) + 2 ))
					local filler_str=$($PRINTF "%*s" ${filler_num})
					PRINT_LEFT_IN="${c_invert}$filler_str" #$c_reset"
					PRINT_LEFT_OUT="${clrCL}${c_front}${c_back}"
					PRINT_RIGHT_IN="${c_reset}${c_front}${c_back}"
					pos_cor_num=0
					;;
		esac

		# Get some numbers
		local lenLeft="${#BORDER_LEFT}" lenRight="${#BORDER_RIGHT}" lenClrFont=${#c_front} lenClrBack=${#c_back}
	#	local identRight=$(( $lenRight + ${#clrCL}  ))
		local posLEFT="\33[$(( ${#BORDER_LEFT} - 2 ))G"
		local posRIGHT="\33[$(( $(( $COLUMNS / 2 * 2 )) - $lenRight - $pos_cor_num ))G"
		local posEND="\33[$(( $(( $COLUMNS / 2 * 2 )) ))G"

#set +x
		# Well, left aligned it works. isnt too hard
		#printf "\r${clrCL}${BORDER_LEFT} " >&2		# ORG
		$PRINTF "\r${PRINT_LEFT_OUT}${posLEFT}${BORDER_LEFT}${PRINT_LEFT_IN}" #>&2

		# The right side is much more challenging
		#printf "${posRIGHT}${BORDER_RIGHT}" >&2
		$PRINTF "${posRIGHT}${PRINT_RIGHT_IN}${BORDER_RIGHT}${PRINT_RIGHT_OUT}${c_reset}" >&2
		$PRINTF "${posEND}"
	}
	swarm.print.text() { # MODE [ LEFT CENTER RIGHT]
	# This simply puts the text
	# according to MODE
		case ${1/-} in
			t)	MODE=title	;;
			h)	MODE=header	;;
			*)	MODE=basic	;;
		esac
		shift

		local fix_title=0
		local fix_header_r=0
		# Check if it is too short, if so, print fallback mode and return
		[[ ${COLUMNS} -lt 25 ]] && \
				$PRINTF "%s\n" "${@}" && \
				return 1

		# Set basic values
		local BORDER_LEFT="${SWARM_THEME_DATA[border-left]}" BORDER_RIGHT="${SWARM_THEME_DATA[border-right]}"
		local clrFRONT="${SWARM_THEME_DATA[color-front]}" clrBACK="${SWARM_THEME_DATA[color-back]}"
		local clrCL="\e[2K"
#echo border:$BORDER_LEFT
		# Check if border-right was set:
		[ -z "$BORDER_RIGHT" ] && \
				for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done

		# Get some numbers
		local lenLeft"${#BORDER_LEFT}" lenRight="${#BORDER_RIGHT}" lenClrFont=${#clrFRONT} lenClrBack=${#clrBACK}
		local identRight=$(( $lenRight + ${#clrCL}  ))
#echo len:$lenLeft

		# Get the actual string
		local evalLeft=$($ECHO "$1")
		local evalMiddle=$($ECHO "$2")
		local evalRight=$($ECHO "$3")

		# Retrieve their length
		local lenEvalLeft=${#evalLeft}
		local lenEvalMiddle=${#evalMiddle}
		local lenEvalRight=${#evalRight}

		# Small corrections required
		case $MODE in
		"header")	fix_header_r=4 #$(( ${#c_front} + ${#c_back}  ))
					;;
		"title")	fix_title=12
					;;
		esac

		# Calculate positions
		local posLEFT="\33[$(( ${#BORDER_LEFT} + 2 ))G"
		local posMIDDLE="\33[$(( $(( $COLUMNS / 2 )) - $(( ${#2} / 2 ))  + $fix_title ))G"
		local posRIGHT="\33[$(( $(( $COLUMNS / 2 * 2 )) - $lenRight - ${lenEvalRight} - 1 + $fix_header_r ))G"
		posEND="\33[$(( $(( $COLUMNS / 2 * 2 )) ))G"

		# Output
		$PRINTF "${posLEFT}$1"
		$PRINTF "${posMIDDLE}$2"
		$PRINTF "${posRIGHT}$3"
		$PRINTF "${posEND}"
	}
#
# Visual outputs - 'End user' stuff
#
	header() { # LEFT CENTER RIGHT
	# This prints a full line in blue (default-back), with white (default-front) text
	# TODO long string adjustments TODO
		swarm.print.border -h
		swarm.print.text -h "${c_front}${c_back}$1" "$2" "$3${c_reset}"
		$PRINTF "$posEND\n"
	}
	title() { # Text
	# This prints a single centered string on a line
	# It has blue borders and fills the inner line with white (Default-{front,back})
		swarm.print.border -t
		swarm.print.text -t "" "${c_front}${c_back}${c_invert}$1${c_reset}" ""
		$PRINTF "$posEND\n"
	}
	printe() { # STR1 STR2 STR3
	# Simply prints the strings as passed, it requires 3 strings to use the center
	# For piping, it expects 3 lines, each representing 1 variable
		case "$1" in
		"--"|"-")
				# Read pipe, expect 3 lines
				read LEFT; read CENTER; read RIGHT
				printe "$LEFT" "$CENTER" "$RIGHT"
				return
				;;
		esac
		swarm.print.border -e
		swarm.print.text -e "$1" "$2" "$3"
		$PRINTF "$posEND\n"
	}
	printl() { # STR1 STR2 STR3
	# Simply prints the strings as passed, stays on the same line
	# It requires 3 strings to use the center
		case "$1" in
		"--"|"-")
				# Read pipe, expect 3 lines
				read LEFT; read CENTER; read RIGHT
				printe "$LEFT" "$CENTER" "$RIGHT"
				return
				;;
		esac
		swarm.print.border -p
		swarm.print.text -p "$1" "$2" "$3"
	}
#
# Visual outputs - 'End user' stuff - Core Convenience
#
	ask() { # "What question?"
	# Ask a yes/no question, returns 0/true for yes and 1/false for no
	# y/n are taken from language file and are used in code
		# Check if 'yesno' is empty, if so, fill with fallback values
		case "$1" in
		"--version")
			$PRINTF "$SWARM_MSG_HELP_VERSION"
			$PRINTF "\n"
			return 0
			;;
		"--help")
			$PRINTF "\r%s" "$SWARM_MSG_HELP_ASK"
			$PRINTF "\n"
			return 0
			;;
		esac
		[[ -z "${SWARM_MSG_ASK_YES}${SWARM_MSG_ASK_NO}" ]] && \
			SWARM_MSG_ASK_YES="+" && \
			SWARM_MSG_ASK_NO="-"

		swarm.print.border -e
		# Print the text
		$PRINTF "$(swarm.print.goto $(( ${#SWARM_THEME_DATA[border-left]} + 2  )))$1 (${SWARM_MSG_ASK_YES}${SWARM_MSG_ASK_NO})"
		# Move the cursor
		$PRINTF "$(swarm.print.goto $(( $COLUMNS / 2 * 2 - ${#SWARM_THEME_DATA[border-left]} - 2  )))"
		read -n1 answer
		$PRINTF "$posEND\n"

		case "$answer" in
		"+"|"$SWARM_MSG_ASK_YES")
				return 0
				;;
		"-"|"$SWARM_MSG_ASK_NO")
				return 1
				;;
		*)		return 1
				;;
		esac
	}
