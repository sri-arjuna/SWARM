#!/usr/bin/env bash
cfg.edit() { #
#
#
	script_version=0.9.2
	script_created="2014.11.03"
	script_changed="2016.01.24"

	script_name="${0##*/}"
	script_name="${script_name/.sh/}"
	script_title="tui-conf-editor"
	script_package="TUI"
	script_url="script_url="https://savannah.nongnu.org/projects/tui/""

	script_author="Simon Arjuna Erat (sea)"
	script_contact="erat.simon æ gmail,com"
	script_license="GNU General Public License (GPL)"

	script_header="$script_name ($script_version)"
#
#	Internal preps
#
	[ ! -z "$script_package" ] && script_package+=" " && script_package_txt=" ()"
#
#	Shared variables & Language
#
	break_on_injections "${@}" && exit 1
#
#	Variables
#
	typeset -r CFG="$script_config"
	typeset -r LOG="$TUI_DIR_LOGS/${script_name}.log"
	declare TMP="${TUI_DIR_TEMP:-TMPDIR}/${script_name}-$$.tmp~"
	declare -A OPTIONS DEFAULTS INDEX TYPE LABELS
	declare -a FILES
	FILE_LABEL=""
	WAIT_SECONDS=1
	write_file=false
	hide_edit=false
	be_quiet=false
	be_clear=false
	>"$TMP"	# Clear content
#
#	Traps
#
	trap "exit 130" INT ABRT KILL
	trap "exit $?" QUIT
#
#	Messages to translate:
#
	MSG_TR_VERSION="$(eval_gettext '${script_name}${script_package_txt}, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat (sea)
License GNU General Public License (GPL) or later <http://www.gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	MSG_TR_HELP="$(eval_gettext '
NAME
  $script_name - Configuration Editor

SYNOPSYS
  $script_name [-h|--help] [--version] [-cq] [-T|--title \"Custom Title\"] [--option OPTNAME [--values \"val1 val2 ...\"] [--default val1]] FILE1 [FILE2 ...]


DESCRIPTION
  Advanced configuration editor for configuration files.
  Can be used to write a default configuration file, or to let the user select among predefined values.

OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0

  -H|--header \"HEADER\"	Set a custom heading
  -T|--title \"TITLE\"	Set a custom title
  -F|--file \"FILELABEL\"	Set the display of the filename to FILELABEL

  --option OPTNAME	Creates a new option OPTNAME
  --values \"VALUE1 VALUE2 VALUE\" 	Assigns VALUES to OPTNAME
  --default VALUE	Set default VALUE for OPTNAME

  --conf-header		Writes a custom heading into the config file, can be used multiple times
  --kiosk		Disable the manual editing of the current file
  -q			Quiet mode, just checks the file for passed OPTNAME, and writes default VALUE if missing
  --write-no-exist	Writes a default configuration file
  -c			Clear the screen after each file or variable
  -w|--wait WAIT_SECONDS	Wait WAIT_SECONDS before clearing the screen (default 1)


EXAMPLE

	$script_name	-T \"Current GRUB config defaults\" /etc/default/grub

	$script_name	--option var_gender --default male --values=\"male female\" \\
			--option var_name --default \"\044USER\" \\
			--option var_age --default 0 --values=\"1-13 14-21 22-44 44-62 63-90 90+\" \
			--write-no-exist \
			/path/to/file

HINTS
  If your script project requires a new variable after an update, use the \"-q\" toggle to update the user configuration file with the new default values.

SEE ALSO
  bash(1), gettext(1), tuirc(1), tui-conf-get(1), tui-conf-set(1), tui-wait(1)

BUGS
  Report bugs to: mailinglist ; <erat.simon æ gmail,com>

  $script_name - Homepage: <$script_url>

  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat (sea), <http://linux-scripter.blogspot.ch>
')"
	MSG_TR_WORD_BACK="$(gettext 'Back')"
	MSG_TR_WORD_EDIT="$(gettext 'Edit')"
	MSG_TR_SELECT_FILE="$(gettext 'Please select a file to edit')"
	MSG_TR_CHANGE_VALUE="$(eval_gettext 'Select a variable to change or go back')"
	#MSG_TR_YY="$(eval_gettext '')"
#
#	Functions
#
	cleanup() {
	# Removes all known tempfiles and exits
	# Is called at the end of the script and by the trap
		declare -a arr_CLEANUP=(
			"$TMP"
			# Add your tempfiles
			# here
			)
		for remove in "${arr_CLEANUP[@]}"
		do 	( [ -f "$remove" ] || [ -p "$remove" ] ) && rm -f "$remove"
		done
	}
	show_help() {
	# Prints the helpscreen
	# and exits
		printf "$MSG_TR_HELP\n"
		exit 99
	}
	show_version() {
	# Prints the version of the script
	# and exits
		printf "$MSG_TR_VERSION\n"
		exit 111
	}
	edit_file() { # /path/to/FILE
	#
	#
		#set -x
		CONF="$1"
		MODE=input
		[ -n "$(echo ${INDEX[@]})" ] && \
			OPTS_FOUND=(${INDEX[@]}) || \
			OPTS_FOUND=($(tui-conf-get -l "$CONF"))
		while 	# Preview
			#clear
			tui-title "${FILE_LABEL:-$CONF}"
			for item in "${OPTS_FOUND[@]}"
			do 	tui-print -E  "$item" "$(tui-conf-get -- $CONF $item)"
			done
			tui-print

			# Select value or back
			tui-print -E  "$MSG_TR_CHANGE_VALUE"
			[ "true" = "$hide_edit" ] && this_edit="" || this_edit="$MSG_TR_WORD_EDIT"
			action=$(tui-select "$MSG_TR_WORD_BACK" $this_edit "${OPTS_FOUND[@]}" || exit 1)
			# Back or prepare variables
			[ ! "$MSG_TR_WORD_BACK" = "$action" ] || break
		do
			# Edit
			if [ "$action" = "$this_edit" ]
			then	tui-edit "$CONF"
				continue
			fi

			# Exit on cancel
			[ -z "${action/^[*}" ] && break


			# Print label
			tui-print -E
			LBL="${LABELS[$action]}"
			[ -n "$LBL" ] && tui-print -S 111 "$LBL"

			# TODO  -- Bugfix this
			#echo "$action" | $GREP '\\E\['

			curval=$(tui-conf-get "$CONF" "$action")
			vTYP="${TYPE[$action]}"
			[ -z "$vTYP" ] && vTYP=input
			case "$vTYP" in
			input)	QUESTION="$(eval_gettext 'What is the new value for ${action}($curval)?')"
				if ! newval=$(tui-read "$QUESTION")
				then	return 1
				fi
				;;
			select)	QUESTION="$(eval_gettext 'Select the new value for ${action}($curval)?')"
				tui-print -E  "$QUESTION"
				newval=$(tui-select ${OPTIONS[$action]}) || exit 1
				;;
			esac

			if [ -z "$newval" ]
			then 	printf "\n"
				exit 1
			#	tui-yesno "$(eval_gettext 'Set $action to "$newval"?')" && \
			#		tui-conf-set -v "$CONF" "$action" "$newval"
			else 	tui-conf-set -v "$CONF" "$action" "$newval"
			fi
			$be_clear && tui-wait "$WAIT_SECONDS" && clear && tui-header "$script_header"
		done
	}
	write_default() { # FILE
	# Writes the file if missing
	# and fills in all default values if missing
		[ -z "$(echo ${INDEX[@]})" ] && tui-print -S 1 "$(gettext 'No --options OPTNAME passed to write!')" && exit 1
		thisConf="$1" ; [ -z "$thisConf" ] && echo "$(gettext 'Must provide a FILE to $FUNCNAME')" && return 1
		doOverwrite=false;if [ ! -f "$thisConf" ]; then touch "$thisConf" && doOverwrite=true|| return 1 ;fi
		$doOverwrite && cat "$TMP" > "$thisConf"
		for thisOpt in "${INDEX[@]}";do
			$GREP -q "$thisOpt" "$thisConf" || printf '%s\n' "${thisOpt}=${DEFAULTS[$thisOpt]}" >> "$thisConf"
		done
		$be_quiet && exit
	}
#
#	Traps are cool!
#
	# TRAP FUNCTION/"COMMAND" MODE's ...
	trap cleanup INT QUIT KILL ABRT
#
#	Get options
#
	# -a|--alternative ; to allow longoptions with a single leading '-'
	GETOPT=$(getopt \
		--options	"hT:H:qF:cw:" \
		--longoptions	"help,version,wait:,kiosk,file:,title:,header:,conf-header:,option:,default:,values:,label:,write-no-exist" \
		--name 		"${0##*/}" -- "${@}" \
	)
	eval set -- "${GETOPT}";C=0
	while true
	do 	#unset OPTS[@]
		case "$1" in
		-h|--help)	show_help	;;
		--version)	show_version	;;
		--)		shift ; break	;;
		# --------------------------------
		-H|--header)	script_header="$2"
				shift 2		;;
		-T|--title)	script_title="$2"
				shift 2		;;
		-F|--file)	FILE_LABEL="$2"
				shift 2		;;
		--conf-header)	cat >> "$TMP" <<-EOF
				# $2
				EOF
				shift 2 	;;
		--option)	INDEX["$2"]="$2"
				LASTOPT="$2"
				shift 2 	;;
		--default)	DEFAULTS[$LASTOPT]="$2"
				shift 2 	;;
		--values)	OPTIONS[$LASTOPT]="$2"
				TYPE[$LASTOPT]="select"
				shift 2 	;;
		--label)	LABELS[$LASTOPT]="$2"
				shift 2 	;;
		--write-no-exist)
				write_file=true
				shift		;;
		-q)		be_quiet=true
				shift 		;;
		-c)		be_clear=true
				shift 		;;
		--kiosk)	hide_edit=true
				shift		;;
		--wait|-w)	WAIT_SECONDS="$2"
				shift 2 	;;
		esac
		[ -z "$1" ] && LASTOPT=""
		((C++));[ $C -gt 100 ] && break
	done
	FILES=("${@}")
	[ ${#FILES[@]} -lt 1 ] && show_help
#
#	Action & Display
#
	$write_file && write_default "$1"
	while 	tui-header "$script_header" "$(date +'%F %T')"
		tui-title "$script_title"
	do 	if [ ${#FILES[@]} -ne 1 ]
		then 	tui-print -E  "$MSG_TR_SELECT_FILE"
			thisFile=$(tui-select  "$MSG_TR_WORD_BACK" "${FILES[@]}")
			[ -f "$thisFile" ] || break
		else	edit_file "$FILES"
			RET=$?
			break
		fi
		edit_file "$FILES"
		RET=$?
		$be_clear && tui-wait $WAIT_SECONDS && clear && tui-header "$script_header"
	done
#
# 	Clean up & exit
#
	cleanup
	exit $RET
}
