#!/usr/bin/env bash
#
#	Functions
#
        cfg.list() { # FILE
        # Parses given FILE for non commented lines
        # and returns what is on the 'variabel' side of '='
	( [[ -z "$1" ]] || [[ ! -f "$1" ]] ) && $PRINTF '%s\n' "${SWARM_MSG_CFG_LIST_USAGE}" && return 1
	local result array
	# shellcheck disable=SC2016
	# This awk should work with mawk 1.3.3, prior to [:alpha:] and stuff
	result=( $( $AWK -F= '$1~/^[^#]+$/ {print $1}' "$1" ) )
	# But just as a failsafe,
	if [[ -n "$result" ]]
	then    $PRINTF '%s\n' "${result[@]}"
	        return 0
	else    array=( $( $GREP "=" "$1" | $GREP -v ^"#" | $AWK -F '=' '{print $1}') )
		for found in "${array[@]}"
		do
		        $ECHO "${found}"
		done
	fi
        }
	cfg.get() { # FILE VARNAME
	# Gets the value of VARNAME from given FILE
	# Returns empty with code 1 if nothing was found
		[[ -z "$2" ]] && $PRINTF '%s\n' "${SWARM_MSG_CFG_GET_USAGE}" && return 1
	# Prepare vars
		local beSecure cAsEsEnSiTiVe
		beSecure=false
		cAsEsEnSiTiVe=true
	# Get args
		for opt in "${@}"
		do
			[[ "-" == "${opt:0:1}" ]] && \
				case "${opt:1}" in
				"i")
					cAsEsEnSiTiVe=false
					shift
					;;
				"s")
					beSecure=true
					shift
					;;
				esac
		done
		local CONFFILE="$1"
		local VARNAME="$2"
		[ ! -f "$CONFFILE" ]  && $PRINTF '%s\n' "$SWARM_MSG_PHRASE_FILENOTFOUND" >&2 && return 1
		[ "$CONFFILE" = "${CONFFILE##*/}" ] && CONFFILE="./$CONFFILE"

		# If VARNAME starts with Pass|password|pw, do not source the conf file but use awk
		case "${VARNAME,,}" in
		pw|pass|passwor[dt])
			beSecure=true
			;;
		esac
	#
	#	Display
	#
		if ! $cAsEsEnSiTiVe
		then
			# Case in-sensitive
			# So lets make sure VARNAME is the same as in the file
			# shellcheck disable=SC2016
			VARNAME=$( $GREP -i "${VARNAME}=" | $AWK -F "=" '{print $1}' )
		fi

		if true #$beSecure
		then	# This is slower but doesnt show up the other values
			# shellcheck disable=SC2016
			$AWK -F= -v VAR="$VARNAME" '$1 ~ "^[^#]*" VAR "$"{gsub ("#.*$|\"|\047|"$1 FS, ""); print}' "$CONFFILE" | tail -n1
		else	# This method is about twice the speed of the awk
			# But alot less secure
			# shellcheck disable=SC1090
			source "$CONFFILE" && $PRINTF "${!VARNAME}"
		fi
	}
cfg.set() { # FILE VARNAME VALUE
# Sets the value of VARNAME from given FILE to VALUE
# Returns with code 0 on success and code 1 if failed
	[[ -z "$3" ]] && swarm.help.usage "${FUNCNAME[@]}" && return 1
	swarm.protect "${FUNCNAME[@]}" "${@}" && return 1
	#set -x
	local TMP="$SWARM_TMP"
	local OPT=""
	#local VALUE=""
	local VARNAME=""
	local CAPS=false
	local SMALL=false
	#local hadDollar=false
	local SD=","
	local Q="-q"	# Make grep quiet where required
#
#	Catching Arguments
#
	for opt in "${@}"
	do
		if [[ "-" == "${opt:0:1}" ]]
		then
			case "${opt:1}" in
			"c")	CAPS=true
				SMALL=false
				shift
				;;
			"s")	SMALL=true
				CAPS=false
				shift
				;;
			"i")	OPT="-i $2"
				shift 2
				;;
			"v")	beVerbose=true
				shift
				;;
			esac
		else	# It is not an option
			break
		fi
	done
#
#	Prechecks
#
	# Options are passed, now we can check if there are enough arguments left...
	[[ $# -lt 3 ]] && \
		printe "$SWARM_MSG_CFG_SET_USAGE" "$(swarm.str.status 1)" && \
		return 1
	# Handle file
	local CONFFILE="$1"	;	shift
	# Create file if it is missing
	if [[ ! -f "$CONFFILE" ]]
	then	# Fail if path does not exist:
		# shellcheck disable=SC2154
		$isDir "${CONFFILE/${CONFFILE##*/}}" || return 1
                touch "$CONFFILE"
	fi
	# Handle VARNAME, secure if its pw|pass|password
	if $CAPS
	then	VARNAME="${1^^}"
	elif $SMALL
	then	VARNAME="${1,,}"
	else	VARNAME="${1}"
	fi
	shift
	# Handle VALUE, secure if VARNAME was pw|pass|password
	$CAT>"$TMP"<<-EOF
	$1
	EOF
	# shellcheck disable=SC2015
	$GREP -q '[\ \$]' "$TMP" && \
		local need_quotes=true || \
		local need_quotes=false
	# shellcheck disable=SC2015
	$GREP -q "$VARNAME" "$CONFFILE" && \
		local need_sed=true ||\
		local need_sed=false
#
# 	Preformat strings
#
	lead_space=$(grep "[[:space:]]*[azAZ]" "$CONFFILE"|grep -v "#" |tail -n 1)
	lead_space="${lead_space/[a-zA-Z0-9]*}"
	if $need_sed
	then	# Full line
		# shellcheck disable=SC2086
		SEARCH=$( $GREP $OPT -v '^#' "$CONFFILE"|$GREP "${VARNAME}=" )
		$need_quotes && \
			REPLACE="$lead_space$VARNAME=\"$1\"" || \
			REPLACE="$lead_space$VARNAME=$1"
		# Set proper SED 'divider'
		if $GREP $Q "$SD" "$TMP"
		then 	# Coma was found
			SD="/"
			$PRINTF "$REPLACE"|$GREP "$SD"|$GREP -q '\\' && SD="\\"	# backslash was found
			[ ! "$SD" = "/" ] && \
				$PRINTF "$REPLACE"|$GREP ","|$GREP "$SD"|$GREP -q "/" && SD="|"	# Forward slash was found
		fi
		$SED s"${SD}""$SEARCH""${SD}""$REPLACE""${SD}" -i "$CONFFILE"
		#$SED s,"$SEARCH","$REPLACE", -i "$CONFFILE"
	else	# Get leading spaces if applicable
		# Add the line
		if $need_quotes
		then	$CAT >> "$CONFFILE" <<-EOF
			$lead_space$VARNAME="$(<"$TMP")"
			EOF
		else	$CAT >> "$CONFFILE" <<-EOF
			$lead_space$VARNAME=$(<"$TMP")
			EOF
		fi
	fi

	$GREP "${VARNAME}" "$CONFFILE" | $GREP -q "$(<"$TMP")"
	RET=$?
	$beVerbose && ! $beSecure && \
		status $RET "$CONFFILE" "$VARNAME=$(<"$TMP")"
	$RM "$TMP"
	#set +x
	return $RET
}
cfg.edit() { # [options] FILE1 FILE2 ...
# Directly go into edit mode if only 1 file was passed, lets you choose which file to view and/or edit.
# You can also pass custom variables and their mandatory-optional values (aka multiple-choice)
	script_version=0.9.2
	#script_created="2014.11.03"
	#script_changed="2016.01.24"

	# shellcheck disable=SC2128
	script_name="${script_name:-SWARM}"
	script_title="$SWARM_MSG_CFG_EDIT_TITLE"
	script_header="$script_name ($script_version)"
#
#	Shared variables & Language
#
	swarm.protect "${@}" && return 1
#
#	Variables
#
	declare TMP="${SWARM_TMP_DIR:-${TMPDIR/tmp}}/${script_name}-$$.tmp~"
	declare -A OPTIONS DEFAULTS INDEX TYPE LABELS
	declare -a FILES
	local failsafe
	failsafe=0
	FILE_LABEL=""
	WAIT_SECONDS=1
	do_write_file=false
	do_hide_edit=false
	be_quiet=false
	be_clear=false
	>"$TMP"	# Clear content
#
#	Traps
#
	#trap "exit 130" INT ABRT KILL
	#trap "exit $?" QUIT
#
#	Messages to translate:
#
	MSG_TR_WORD_BACK="$SWARM_MSG_WORD_BACK"
	MSG_TR_WORD_EDIT="$SWARM_MSG_WORD_EDIT"
	MSG_TR_SELECT_FILE="$SWARM_MSG_PHRASE_SELECT_FILE"
	MSG_TR_CHANGE_VALUE="$SWARM_MSG_CFG_EDIT_SELECT_VAR"
	_edit_file() { # /path/to/FILE
	# Prints all variables and their values
	# Then lets user decide which variable to edit
		local CONT failsafe
		failsafe=0
		CONF="$1" ; shift
		vTYP=input
		[ -n "$($ECHO "${INDEX[@]}")" ] && \
			OPTS_FOUND=( $( $ECHO "${INDEX[@]}" $(cfg.list "$CONF") | uniq )) || \
			OPTS_FOUND=($(cfg.list "$CONF"))
		while 	# Preview
			#clear
			title "${FILE_LABEL:-$CONF}"
			for item in ${OPTS_FOUND[@]} #$( $ECHO $( [[ -f "$CONF" ]] && cfg.list "$CONF") "${OPTS_FOUND[@]}" | uniq )
			do 	printe  "$item" "$(cfg.get "$CONF" "$item")" #>&1
			done
		# Select value or back
			title "$SWARM_MSG_WORD_MENU"
			printe  "$MSG_TR_CHANGE_VALUE:"
			$do_hide_edit && this_edit="" || this_edit="$MSG_TR_WORD_EDIT"
			# shellcheck disable=SC2184
			unset OUT[@]
			# shellcheck disable=SC2086
			action=$(pick -m $this_edit "${OPTS_FOUND[@]}" || return 0)
		# Back or prepare variables
			[[ ! "$SWARM_MSG_WORD_BACK" == "$action" ]] #&& return 0
		do	# Edit
			if [[ "$action" = "$this_edit" ]]
			then	edit "$CONF"
				continue
			fi
		# Exit on cancel
			[ -z "${action/^[*}" ] && return 1
		# Print label
			printe #" --- $action  --- "
			LBL="${LABELS[$action]}"
			[ -n "$LBL" ] && status 111 "$LBL"
		# Get current values
			curval=$(cfg.get "$CONF" "$action")
			if $ECHO "${INDEX[*]}" | $GREP -q "$action"
			then	vTYP=select #"${TYPE[$action]}"
			else	vTYP=input
			fi
		# Prepare the question, this one contains variables
			QUESTION="$SWARM_MSG_CFG_EDIT_VALUE_NEW: ${action}($curval)"
		# Prepare and execute according action
			[ -z "$vTYP" ] && vTYP=input
			case "$vTYP" in
			input)
				if ! newval=$(ask "$QUESTION")
				then	return 1
				fi
				;;
			select)
				printe  "$QUESTION"
				#newval=$(pick "$(printf '%s\n' "${OPTIONS[$action]}")") || return 1
				# shellcheck disable=SC2046
				newval=$(pick $(printf '%s\n' "${OPTIONS[$action]}")  ) || return 1
				;;
			esac

			if [ -z "$newval" ]
			then 	continue
			else 	# shellcheck disable=SC2154
				yesno "Set $action to $newval?" || continue
				cfg.set "$CONF" "$action" "$newval"
			fi
			$be_clear && wait "$WAIT_SECONDS" && clear && header "$script_header"
			((failsafe++)) ; [[ $failsafe -gt 100 ]] && return 1
		done
	}
	_write_default() { # FILE
	# Writes the file if missing
	# and fills in all default values if missing
		if [ -z "${INDEX[*]}" ]
		then	status 1 "$SWARM_MSG_CFG_EDIT_NO_OPTIONS"
			return 1
		fi
		local thisConf
		thisConf="$1"
		[ -z "$thisConf" ] && \
			$ECHO "$SWARM_MSG_CFG_EDIT_MUST_PROVIDE" && \
			return 1
		doOverwrite=false
		if [ ! -f "$thisConf" ]
		then 	touch "$thisConf" && \
				doOverwrite=true|| \
				return 1
		fi
		$doOverwrite && $CAT "$TMP" > "$thisConf"
		for thisOpt in "${INDEX[@]}";do
			$GREP -q "$thisOpt" "$thisConf" || $PRINTF '%s\n' "${thisOpt}=${DEFAULTS[$thisOpt]}" >> "$thisConf"
		done
		init.log "Created: $thisConf // i: ${INDEX[*]}  // d: ${DEFAULTS[*]} // v: ${VALUES[*]}"
		$be_quiet && return
	}
#
#	Get options
#
	local A AC=0
	A=( "${@}" )	# Args
	for a in "${A[@]}"
	do 	#unset OPTS[@]
		#header "in options :: $C $1"
		case "$1" in
		-h|--help)	show_help	;;
		# --------------------------------
		-H|--header)	script_header="$2"
				shift 2		;;
		-T|--title)	script_title="$2"
				shift 2		;;
		-F|--file)	FILE_LABEL="$2"
				shift 2		;;
		--conf-header)	cat >> "$TMP" <<-EOF
				# $2
				EOF
				shift 2 	;;
		--option)	INDEX["$2"]="$2"
				LASTOPT="$2"
				shift 2 	;;
		--default)	DEFAULTS[$LASTOPT]="$2"
				shift 2 	;;
		--values)	OPTIONS[$LASTOPT]="$2"
				TYPE[$LASTOPT]="select"
				shift 2 	;;
		--label)	LABELS[$LASTOPT]="$2"
				shift 2 	;;
		--write-no-exist)
				do_write_file=true
				shift		;;
		-q)		be_quiet=true
				shift 		;;
		-c)		be_clear=true
				shift 		;;
		--kiosk)	do_hide_edit=true
				shift		;;
		--wait|-w)	WAIT_SECONDS="$2"
				shift 2 	;;
		*)		break	;;
		esac
		[ -z "$1" ] && LASTOPT=""
		# Args Count
		((AC++))
	done
#
#	Check for remaining arguments / file/s
#
	if [[ -z "$1" ]]
	then	# Its empty...
		swarm.help.usage cfg.edit
		return 1
	elif [[ 1 -eq ${#@} ]]
	then	# We got a valid argument:
		typeset -r CFG="$1"
	else	# it is more than one
		FILES=("${@}")
		[ ${#FILES[@]} -lt 1 ] && show_help
	fi
#
#	Action & Display
#
	$do_write_file && _write_default "${CFG:-${FILES[@]}}"
	while 	true
	do
		if [[ -n "$CFG" ]]
		then	_edit_file "$CFG"
			return $?
		elif [ ${#FILES[@]} -ne 1 ]
		then 	header "$script_header" "$($DATE +'%F %T')"
			title "$script_title"
			printe  "$MSG_TR_SELECT_FILE"
			thisFile=$(pick -m "${FILES[@]}") || continue
			[[ "$thisFile" == "$SWARM_MSG_WORD_BACK" ]] && break
			# This is a failsafe in case functions or variables gets listed...
			[[ -f "$thisFile" ]] || continue
		else	_edit_file "${FILES[@]}"
			RET=$?
			return $RET
		fi
		_edit_file "$thisFile"
		RET=$?
		if $be_clear
		then
			wait "$WAIT_SECONDS"
			clear
			header "$script_header"
		fi
		((failsafe++)) ; [[ $failsafe -gt 100 ]] && return 1
	done
#
# 	Clean up & exit
#
	return $RET
}
