#!/usr/bin/env bash
swarm.list.files() { # DIR
# Returns a list of every file contained in DIR
# Exports all the entries as array FILES
	# Check for passed argument
	[[ -z "$1" ]] && { swarm.help.usage "${FUNCNAME[@]}" ; return 1 ; }
	# Check if it is a directory, fail otherwise
	[[ ! -d "$1" ]] && { status 1 "$SWARM_MSG_PHRASE_DIRNOTFOUND" "${FUNCNAME[@]} $1" ; return 1 ; }
	# Prepare counter to remove unwanted entries
	local iCounter=0
	# Go to the work dir
	$CD "$1"
	# Lets fill an array
	FILES=( * )
	# Parse the array
	for item in "${FILES[@]}"
	do
		if [[ -d "${item}" ]]
		then	# This is about FILES, so skip directories
			unset FILES[$iCounter]
		elif [[ -f "${item}" ]]
		then	# We can resolve the filename, so let this pass
		 	$ECHO "$($ECHO ${item})"
		else 	# Cannot handle this item, so lets remove this
			unset FILES[$iCounter]
		fi
		((iCounter++))
	done
	# Export Array for -> ADDITIONAL <- reuse
	export -A FILES
	# Go back to where we were
	$CD "$OLDPWD"
}
swarm.list.dirs() { # DIR
# Returns a list of every FOLDER contained in DIR
#
	local DIR="" array=""
	[[ -z "$1" ]] && { swarm.help.usage "${FUNCNAME[@]}" ; return 1 ; }
	DIR="$1" ; shift
	$CD "$DIR"
	array=(*)
	for d in "${array[@]}"
	do
		case "$d" in
		'.'|'..')
			continue
			;;
		*)	[[ -d "$d" ]] && $PRINTF "$d\n"
			;;
		esac
	done
	$CD "$OLDPWD"
	return
	for d in $($LS -a) # for f in "$d"/* "$d"/.[!.]*
	do
		case "$d" in
		'.'|'..')
			continue
			;;
		*)	[[ -d "$d" ]] && $PRINTF "$d\n"
			;;
		esac
	done
	$CD "$OLDPWD"

	# -----------------
	return
	# ---------------

	$CD "$DIR"
	array=(*)
	$CD "$OLDPWD"
	$PRINTF '%s\n' "${array[@]}"
}
swarm.list.dirtree() { # [-g -x EXCLUDE] PATH
# Print a list of all subdirs
# Ignores .git by default
	local tmp="" exclude_options="" content=""
    content=("\.git")
	#
    # Catch arguments
    #
 	while :; do
 		case "$1" in
 		-h|-\?|--help)
 			swarm.help.usage "${FUNCNAME[@]}"
 			return 0
 			;;
		"-g") unset content[0]           ;;
        -x|-X) echo "HERE $2" >&2
            content+=("$2") ; shift    ;;
        --)
 			# General purpose pipe support, might need adjustment!
 			while read -r line;do
 				${FUNCNAME[@]} "$line"
 			done
 			return 0
 			;;
 		*)
 			break
 			;;
 		esac
 		shift
 	done
    for igno in "${content[@]}"
    do
        [[ -z $($ECHO "$igno") ]] && continue
        exclude_options+=" -ve $igno"
    done
    $CD "$1" || return 1

    if [[ -z "$exclude_options" ]]
    then    # Show everything, incl .git
            $FIND -type d -print | $SED s,^"\./","",g
    else    # Default handling
            $FIND -type d -print | $GREP $exclude_options | $SED s,^"\./","",g
    fi
    $CD "$OLDPWD"
}
swarm.list.hid() { #
# Returns a list of Human Interface Devices that are connected
# Usualy this refers to mouse and keyboard (not laptop keyboards though)
	local content verified="" work=""
	content=( $(cd "/dev/input/by-id/" ; $LS -1) )
	for item in "${content[@]}"
	do
		work=${item/usb-}
		work=${work/-*}
		$ECHO "${verified[*]}" | $GREP -q "$work" || verified+=("$work")
	done
	$PRINTF '%s\n' "${verified[@]}"
}
swarm.list.video() { #
# Returns a list of video devices
# Usualy things like webcams
	cd /dev
	$LS -1 | $GREP -i [vV]ideo
	cd "$OLDPWD"
}
swarm.list.usb() { #
# Returns a list of USB storage devices
# Often includes empty SD readers : usbIgnore is NOT applied here!
	local content="" verified="" item=""
	#$LS "$devDisk" | $GREP usb | "$GREP" -v part
	content=( $($LS -l /dev/disk/by-id | $AWK '/usb/ {print $9" "$11}' | $GREP -v part) )
	for item in "${content[@]}";do
		$ECHO "${verified[@]}" | $GREP -q "$item" || verified+=("${item/\.\.\/\.\.\/}")
	done
	$PRINTF '%s\n' "${verified[@]}" | $GREP -v usb
}
swarm.list.hdd() { # [-u]
# Shows a list of local storage,
# Only if -u is passed, it will include usb storage
	[[ "-u" == "$1" ]] && \
		$LS -1 /dev/[sh]d[az]* || \
		$LS -1 /dev/[sh]d[az]* | $GREP -v  $(for i in $(swarm.list.usb);do $ECHO "-e '$i'";done;)
}
swarm.list.network() { #
# Print a list of network devices
# On laptops this is usualy a 3 item listk incl io
	ifconfig | $AWK  '/^[a-z]/ {print $1}' | $SED s/":"//
}
