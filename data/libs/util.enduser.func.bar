#!/usr/bin/env bash
bar()  { # [options] [MESSAGE]
# Prints a progress bar
#
	# internals
	local TYPE=""		# Start with no display mode
	local INDI=(  '/' '-' '\' '|' )	# Dont use tui-indi, for asynchronus display
	local TOTAL=$[ ${#INDI[@]} -1 ]
	#WIDTH=${COLUMNS:-$(tput cols)}
	# id file?
	local ID_CUR="$$"	# -i ID storage id
	local ID=""		# -i ID storage id
	# bols
	local CLEARLINE=false	# Clear line between display calls?
	local hadOpts=false	# Shift only if it had opts
	local doReset=false	# Reset the ID file?
	local doBar=false
	local longBar=false	# Show (& calc) the STATUS (procent)
	local hasID=false
	# opts
	local MAX=""
	local VAL #="1"		# This is used as index for the dash animation
	local CURRENT=""
	#local BAR='='
	# Display
	local PROGRESS=""
	local STATUS=""
	local MESSAGE=""
	local STR_COLORS_RAW
	# This should not be required
	#swarm.update.geometry
#
#	Functions
#
	function bar.simple_status() {
	# Generates a single string to represent the actual task/case
	#
		tmp=""
		[ ! -z "$MAX" ] && tmp="NUM"
		$doBar && [ ! -z "$MAX" ] && tmp="BAR"
		builtin echo "${tmp:-DASH}"
	}
	function bar.reset_tmp() { # ID
	# Resets the counter according to passed ID
	# Needs to be one, otherwise last item is too low
		if "$hasID"
		then	SWARM_PROGRESS_BAR_IDS[$ID]=1
		else	SWARM_PROGRESS_BAR_IDS[$ID_CUR]=1
		fi
		export SWARM_PROGRESS_BAR_IDS
	}
	function bar.save_tmp() { # VAL
	# Saves VAL in the temp file according to passed id
	#
		[ -z "$1" ] && return 1
		if "$hasID"
		then	SWARM_PROGRESS_BAR_IDS[$ID]="$1"
		else	SWARM_PROGRESS_BAR_IDS[$ID_CUR]="$1"
		fi
		export SWARM_PROGRESS_BAR_IDS
	}
	function bar.read_tmp() {
	# Reads VAL in the temp file according to passed id
	# Returns VAL
		if "$hasID"
		then	builtin echo "${SWARM_PROGRESS_BAR_IDS[$ID]}"
		else	builtin echo "${SWARM_PROGRESS_BAR_IDS[$ID_CUR]}"
		fi
	}
#
#	Catching Arguments
#
	while : #for opt in "${@}" #while getopts "c:CB:bi:lm:rh" name
	do 	case $1 in
		-B)	BAR="$2"
			hadOpts=true
			;;
		-b)	doBar=true
			;;
		-c)	VAL="$2"
			hadOpts=true
			;;
		-C)	CLEARLINE=true
			;;
		--color)
			STR_COLORS_RAW="$2"
			# Vars
			local c=0
			local str_color str_num
			declare -ag SWARM_BAR_COLORS
			declare -ag SWARM_BAR_VALUE
			# Parse values
			while read item
			do
				str_color="$(builtin echo ${item} | $TR -d [:digit:])"
				str_value="$(builtin echo ${item} | $TR -d [:alpha:])"
				SWARM_BAR_COLORS=($str_color)
				SWARM_BAR_VALUE=($str_value)
				c=$(( $c + 1 ))
			done<<<$(builtin echo "$STR_COLORS_RAW" | $SED s/','/'\n'/g )
			hadOpts=true
			;;
		-i)	ID="$2"
			hasID=true
			hadOpts=true
			;;
		-p)	longBar=true
			;;
		-m)	MAX="$2"
			hadOpts=true
			;;
		-r)	doReset=true
			;;
		--) 	shift ; break ;;
		--help|-?)
			swarm.help.usage $FUNCNAME
			return "${RET_HELP:-99}"
			;;
		*)	break ;;
		esac
		$hadOpts && \
			shift 2 || \
			shift 1 #$(($OPTIND - 1))
		hadOpts=false
	done

#
#	Check for all required options
#
	MESSAGE="$1"
	TYPE=$(bar.simple_status)
	VAL="${VAL:-$(bar.read_tmp)}"
#
#	Something quick?
#
	$doReset && bar.reset_tmp && VAL="$(bar.read_tmp)"
	[[ -z "$VAL" ]] && VAL=1 && bar.reset_tmp
#
#	Prepare required tasks from options
#
	case "${TYPE^^}" in
	DASH)
		bar.save_tmp "$(( $VAL + 1 ))"
		;;
	BAR)
		if [ -z "$MAX" ] || [ -z "$VAL" ]
		then	# Improper handling
			swarm.help.usage $FUNCNAME
			#tui-status 1 "$(eval_gettext 'Usage: $ME [-r] [-m \$MAV_VALUE]  [-bc \$CUR_VALUE] [-l]]  \"msg\"')"
			#exit 1
		fi
		bar.save_tmp "$(( $VAL + 1 ))"
	esac
#
#	Generate output string, and save values
#
	#swarm.update.geometry
	POS=""
	case "${TYPE}" in
	DASH)	# Regular animated dash
		[[ "$VAL" -gt 3 ]] && VAL=0
		n=$(( $WIDTH - ${#BORDER_LEFT} - 8 ))
		POS="\033[${n}G"
		POS=""

		case $VAL in
		0|1|2)	STATUS="${POS}[  ${INDI[$VAL]}   ]"	;;
		# Below is a failback setting (injection protection)
		3)	#source "$SWARM_DIR_THEMES/${SWARM_THEME:-default-blue}"
			#STATUS="${POS}${STATUS}"
			STATUS=$($PRINTF "${POS}[  \174   ]")
			;;
		esac
		;;
	NUM)	# Show increments number
		[ $VAL -gt $MAX ] && \
			swarm.help.usage $FUNCNAME
			#echo "$(eval_gettext '$ME: Should have called \"${TUI_FONT_BOLD}$ME -r\" first!${TUI_FONT_RESET}')" >&2
		STATUS="[ $VAL / $MAX ]"
		;;
	BAR)	# Show pro-cent only if wanted
		fixer_fix=0
		if "$longBar"
		then	# Show also procent ($STATUS)
			procent="$( builtin echo $MAX $VAL | $AWK '{print (100/$1*$2) }' )"
			[ -z "$MESSAGE" ] && fixer_fix=0 || fixer_fix=5	# Does this depend on $WIDTH?

			# How many procent?
			pro="${procent/.*/}"
			[ "$pro" -gt 100 ] && \
				pro=100
			[ "$pro" -ne 100 ] && \
				cent="$( while IFS='.' read P C;do [ -z "$C" ] && builtin echo 00 || builtin echo $C;done<<<$procent)" && \
				cent="${cent:0:2}" || \
				cent=00
			case ${#pro} in
			1)	fixer=13 ;;
			2)	fixer=14 ;;
			3)	fixer=15 ;;
			esac
			length=$(( $numEND - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - 5 - ${fixer} - $fixer_fix  ))
			#STATUS="[ ${pro}.${cent}%% ]"		# Nope
			STATUS="[ ${pro}.${cent}%% ]"	# Ok, what?
			len=$( builtin echo $length $procent | $AWK '{print ($1/100*$2) }' )
		else	STATUS=""
			[ -z "$MESSAGE" ] && fixer_fix=7	# Does this depend on $WIDTH?
			# The length that is available to print bars
			[ -z "$MESSAGE" ] && \
				fixer=16 || \
				fixer=14
			length=$(( $numEND - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - ${fixer} - $fixer_fix ))
			len=$( echo $length $MAX $VAL | $AWK '{print ($1/$2*$3) }' )
		fi
#		echo "len: $len // length: $length // width: $WIDTH // numEND: $numEND"
		# Colorize?
		if [[ -z "$SWARM_BAR_COLORS" ]]
		then
			bars=$($PRINTF '%*s' ${len/.*})
			bars=$(builtin echo "$bars"|$SED s," ","\\$BAR",g)
		else
			local bars_counter=$(( $numEND - ( 2 * $identRight ) ))
			local bars_curret=0
			local arr_count=0
			local clr_now="${SWARM_BAR_COLORS[0]}"
			local clr_color="$(swarm.color.fg $clr_now)"
			local num_next="${SWARM_BAR_VALUE[0]}"
			bars=""
			while [[ $bars_curret -lt $bars_counter ]]
			do
				bars+="${clr_color}${BAR}${c_reset}"
				bars_curret=$(( $bars_curret + 1 ))
				[[ $num_next -lt $bars_curret ]] && \
					arr_count=$(( $arr_count + 1 )) && \
					clr_now="${SWARM_BAR_COLORS[$arr_count]}" && \
					clr_color="$(swarm.color.fg $clr_now)" && \
					num_next="${SWARM_BAR_VALUE[$arr_count]}"
			done
		#	set +x
		fi
		bar_total="$($PRINTF '%*s' ${length/.*})"
		bar_total="[${bars}${bar_total:${#bars}}]"
		PROGRESS="$bar_total"
		;;
	#	*)	tui-status 1 "Error, type ($TYPE) is unhandled"	;;
	esac
	#[ -z "$PROGRESS" ] && printe -S 1 "Something went terrible wrong..." && exit 1
#
#	Display & Action
#
	$CLEARLINE && $PRINTF "\e[2K"
	swarm.print.border
	case "${TYPE^^}" in
	NUM)
		swarm.print.text "$MESSAGE" "" "$STATUS"
		;;
	DASH)
		swarm.print.text "$MESSAGE" "" "$STATUS"
		VAL=$(( $VAL + 1 ))
		if [[ "${TYPE^^}" == "DASH" ]]
		then
			[[ $VAL -ge 4 ]] && VAL=1
		fi
		bar.save_tmp $VAL
		;;
	BAR)	if $longBar
		then	if [[ -z "$MESSAGE" ]]
		 	then	# No message
				#set -x
			#	printf "$posLEFT${PROGRESS}"
			#	num=$(( $posEND - $identRight - ${#STATUS} ))
			#	printf "$(swarm.print.goto $num)$STATUS"
				#set +x
				swarm.print.text "$PROGRESS" "" "$STATUS"
			else 	# With message
				swarm.print.text "$MESSAGE" "" "${PROGRESS}${STATUS}"
			fi
		else	if [[ -z "$MESSAGE" ]]
			then 	# No message
				printf "$posLEFT${PROGRESS}"
				printf "\n"
			else 	# With message
				swarm.print.text "$MESSAGE" "" "${PROGRESS}"
			fi
		fi
		;;
	esac
}
