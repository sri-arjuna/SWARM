#!/usr/bin/env bash
#
# Prepare functions
# to display functions to End User (hence: eu) :P
# Please see: ./docs/{MANUAL,SYNTAX}.md) for further information
#
	swarm.eu.function.list() { # [FILE]
	# Prints a list of properly declared functions
	# see ./docs/{MANUAL,SYNTAX}.md for details
		swarm.protect "${FUNCNAME[@]}" "${@}" && exit 1
		local tmp_oldpwd="${PWD:-$($PWD_EXEC)}"
		local tmp_file="${1##*/}"
		local tmp_dir=${1/$tmp_file}
		local target="${tmp_dir:-$SWARM_DIR_LIBS}/$tmp_file"

		if [[ -n "$tmp_file" ]] && [[ -f "$target" ]]
		then	# There is a specific file passed to parse
			#shellcheck disable=SC2164
			$CD "${tmp_dir:-$SWARM_DIR_LIBS}"
			$GREP "() { #" "$1"| \
				while read nameF _
				do
					$PRINTF '%s\n' "${nameF/()*}"
				done
			#shellcheck disable=SC2164
			$CD "$tmp_oldpwd"
		else	# Just parse all files in SWARM_DIR_LIBS ; default
			_raw_output() {
				(
					#shellcheck disable=SC2164
					$CD "$SWARM_DIR_LIBS"
					$GREP init.*"() {" -- * | $GREP -v GREP
					$GREP cfg.*"() {" -- * | $GREP -v GREP
					# Yes, I could remove these functions here, but I'd like to keep my options
					# for a possible 'internal' section for the help menu
					$GREP swarm.*"() {" -- * | $GREP -v GREP | $GREP -v '.os.' #| $GREP -v sanity | $GREP -v '\.eu\.'
					#shellcheck disable=SC2164
					$CD "$tmp_oldpwd"
				) | while IFS=": " read -r _ funcname _
				do
					# The IFS takes care of the GREP filenames
					# and this variable-regex takes care of the 'function definition'
					$PRINTF '%s\n' "${funcname/()}"
				done
			}
			# Show data
			_raw_output
			unset -f _raw_output
		fi
	}
	swarm.eu.function.show() { # MODE [FILE] FUNCTIONNAME		## MODE= --text || --code
	# Prints either these 2 comment lines or the code
	# Please see: ./docs/contribute/{MANUAL,SYNTAX}.md)
		#shellcheck disable=SC2128
		swarm.protect "$FUNCNAME" "${@}" && exit 1
		#
		# Vars
		#
			local tmp_oldpwd="${PWD:-$($PWD_EXEC)}"
			local GREP_OPTS=""
		#
		# Check for args
		#
			local MODE=none
			case "$1" in
				"--text")
					MODE=text
					shift
					;;
				"--code")
					MODE=code
					shift
					;;
				*)
					MODE=text
					#return 1
					;;
			esac
			#shellcheck disable=SC2015
			[[ -f "$1" ]] && \
				local curFILE="$1" && shift || \
				local curFILE=""
		#
		# Code
		#
			# Prepare command
			case "$MODE" in
				"text")
					GREP_OPTS="-h -a2  ${1}"
					#shellcheck disable=SC2164
					cd "$SWARM_DIR_LIBS"
					# This is just to reduce unrequired disk usage
					#shellcheck disable=SC2015
					[[ -n "$curFILE" ]] && \
						$GREP "$GREP_OPTS" "$curFILE"|| \
						$GREP "$GREP_OPTS" -- *
					#shellcheck disable=SC2164
					cd "$tmp_oldpwd"
					;;
				"code")
					type "$1"
					;;
			esac
	}
	swarm.eu.show.submenu() { # FUNCNAME
	# Lets the user select what kind of information he wants to read
	# This is a subfunction of swarm.eu.show.basics
		printe "$SWARM_MSG_HELPMENU_BASIC_SUBMENU_TEXT"
		# Get something to work with
		# This is required to support other languages
		local item=""
		item=$(pick -m "$SWARM_MSG_WORD_USAGE" "$SWARM_MSG_WORD_MANPAGE")
		# Act accordingly
		case "$item" in
		"$SWARM_MSG_WORD_USAGE")
			swarm.help.usage "$1" | printe --
			;;
		"$SWARM_MSG_WORD_MANPAGE")
			swarm.help.manpage "$1"
			;;
		esac
		return "$RET_BACK"
	}
	#shellcheck disable=SC2120
	swarm.eu.show.basics() { #
	# Shows the basic core functions
	#
		#shellcheck disable=SC2128
		swarm.protect "$FUNCNAME" "${@}" && exit 1
	# Variables
		local list=""
		#list=$(swarm.eu.function.list "${SWARM_DIR_LIBS}/util.commands")
		for F in "${SWARM_DIR_LIBS}/util.commands" "${SWARM_DIR_LIBS}/util.func."{bar,config,download,wrapper}
		do
			list+=" $(swarm.eu.function.list "$F")"
		done
		local item=""
		local list_verified=""
		for this in $($PRINTF '%s\n' "$list"| $SORT )
		do
			[[ "_" == "${this:0:1}" ]] || list_verified+=" $this"
		done
	# Display
		while [[ ! "$item" == "$SWARM_MSG_WORD_BACK" ]]
		do
			title 	"$SWARM_MSG_HELPMENU_ROOT_TOPIC1"
			printe 	"$SWARM_MSG_HELPMENU_BASIC_TEXT"
			#shellcheck disable=SC2086
			item=$(pick -m $list_verified )
			# Retun if 'back' is selected
			[[ "${item/ /}" == "${SWARM_MSG_WORD_BACK}" ]] && break
			# Action !
			title	"$item"
			swarm.eu.show.submenu "$item"
			status $? "$item"
		done
		status "$RET_BACK" "$SWARM_MSG_HELPMENU_ROOT_TOPIC1"
	}
	#shellcheck disable=SC2120
	swarm.eu.show.variables() { #
	# Shows the basic core functions
	#
		#shellcheck disable=SC2128
		swarm.protect "$FUNCNAME" "${@}" && exit 1
	# Variables
		local list=""
		list="isDir isRoot isGUI DESKTOP DISTRO BASED TAR EX CP MV"
		local item=""
	# Display
		while true
		do
			title 	"$SWARM_MSG_HELPMENU_ROOT_TOPIC2"
			printe	"$SWARM_MSG_HELPMENU_VARS_TEXT"
			#shellcheck disable=SC2086
			item=$(pick -m $list )
			case "$item" in
			"$SWARM_MSG_WORD_BACK")
				$PRINTF "$POS_END\n" >&2
				return 4
				;;
			*)
				title "$item"
				#shellcheck disable=SC2086
				status 111 "$item=${!item}" "$(swarm.help.usage ${item})"
				press
				;;
			esac
		done
	}
	#shellcheck disable=SC2120
	swarm.eu.show.advanced() { #
	# Shows the basic core functions
	#
		#shellcheck disable=SC2128
		swarm.protect "$FUNCNAME" "${@}" && exit 1
	# Variables
		# Get full list of all functions
		local list="" this="" item=""
		for F in "${SWARM_DIR_LIBS}/util.func."{env,filesystem,strings}
		do
			list+=" $(swarm.eu.function.list "$F")"
		done
	# Sort out the unwanted ones
		for this in $($PRINTF '%s\n' "$list" | $SORT -u)
		do
			# Hide subfunctions
			[[ "_" == "${this:0:1}" ]] && continue
			# Hide 'internal' functions
			$ECHO "$this" | $GREP -q -ve "print\." -ve "sanity" -ve "\.eu\." -ve "\.theme" -ve "\.lang\." \
						-ve "\.udpate" -ve "\.error" -ve "\.cleanup" -ve "\.protect" \
						-ve "cfg\." -ve "init\." -ve "lang\." -ve "help\." -ve "color\." || continue
			# For some reason, I'm getting multiple entries otherwise...
			$ECHO "$list_verified" | $GREP -q "$this" || list_verified+=" $this"
		done
	# Display
		while true
		do
			#clear
			#header --default "${SWARM_MSG_HELPMENU_ROOT_TITLE}"
			title 	"$SWARM_MSG_HELPMENU_ROOT_TOPIC3"
			printe	"$SWARM_MSG_HELPMENU_ADVANCED_TEXT"
			#shellcheck disable=SC2086
			item=$(pick -m $list_verified )
			case "$item" in
			"$SWARM_MSG_WORD_BACK")
				$PRINTF "$POS_END\n" >&2
				return 4
				;;
			*)
				swarm.eu.show.submenu "$item"
				;;
			esac
		done
	}
	#shellcheck disable=SC2120
	swarm.eu.demo() { #
	# This simply shows some example usages
	#
		local str_title="Demo Screen"
		local C=0 M=5
		local -a array

		header --default "$str_title"
		title "$str_title"

		printe "Left string" "Totaly in the center" "Right string"
		#shellcheck disable=SC2154
		if $isGUI
		then	status "$RET_DONE" "$SWARM_MSG_WORD_SUCCESS : \$isGUI = $isGUI" # || \
		else	status "$RET_FAIL" "$SWARM_MSG_WORD_FAILURE : \$isGUI = $isGUI"
		fi

		title
		printe "Contents of: /"
		$CD / ; array=( * )
		$CD "$OLDPWD"
		printlist -r "${array[@]}"

		title
		yesno "Do you like using: \"$DESKTOP\" on \"$DISTRO\"?" >&1
		status $? "Your answer was: $(swarm.str.bool2str -y $?)"

		local tmp=""
		#shellcheck disable=SC2046
		tmp=$(pick $(swarm.theme.list))
		status "$RET_SKIP" "$SWARM_MSG_WORD_SELECTED : $tmp"

		title "Progress Bars"

		while [[ $C -le $M ]]
		do
			bar -b -p -m $M -c $C "my Message"
			((C++))
			sleep 0.5
		done
		$PRINTF "${POS_END}\n"
		C=0

		while [[ $C -le $M ]]
		do
			bar -B num -m $M -c $C "my Message"
			((C++))
			sleep 0.3
		done
		$PRINTF "${POS_END}\n"
		C=0

		while [[ $C -le $M ]]
		do
			bar -B dash "my Message"
			((C++))
			sleep 0.3
		done
		$PRINTF "${POS_END}\n"
		C=0

		title "Copy"
		#swarm.util.cp
		$CP -r "$0" ./docs/* docs "$SWARM_TMP_DIR"
		wait 3s
		title "Source Code"
		#shellcheck disable=SC2128
		yesno "Show source of itself" && type "$FUNCNAME"
	}
	swarm.eu.help.menu() { # [ITEM]
	# Prints help to ITEM and returns with 1
	# Prints help menu if no ITEM is passed and returns with 0
		local item=""
	# Catch Argument
		if [[ -n "$1" ]]
		then
			case "$1" in
			"list")
				for f in $(swarm.eu.function.list| $GREP -ve "swarm.eu." -ve "swarm.sanity." -ve "init." -ve "swarm.theme." -ve "swarm.update." -ve "swarm.lang.")
				do
					swarm.help.usage "$f"
				done
				return
				;;
			*)
				swarm.help.manpage "$1"
				$PRINTF "\r"
				return $?
				;;
			esac
		fi
	# Display
		while true
		do
			clear
			header --default "${SWARM_MSG_HELPMENU_ROOT_TITLE}"
			title "${SWARM_MSG_HELPMENU_ROOT_TITLE}"
			printe "${SWARM_MSG_HELPMENU_ROOT_TEXT1}"

			local mnu_root_array=("$SWARM_MSG_HELPMENU_ROOT_TOPIC1" "$SWARM_MSG_HELPMENU_ROOT_TOPIC2" "$SWARM_MSG_HELPMENU_ROOT_TOPIC3" )
			item=$(pick -2 -m  "${mnu_root_array[@]}") #$(swarm.eu.function.list))" || item=""

			case "$item" in
			"${SWARM_MSG_WORD_BACK}")
				$PRINTF "$POS_END\n" >&2
				return 4
				;;
			"$SWARM_MSG_HELPMENU_ROOT_TOPIC1")
				# Basic functions
				#shellcheck disable=SC2119
				swarm.eu.show.basics
				;;
			"$SWARM_MSG_HELPMENU_ROOT_TOPIC2")
				# Variables
				#shellcheck disable=SC2119
				swarm.eu.show.variables
				;;
			"$SWARM_MSG_HELPMENU_ROOT_TOPIC3")
				# Advanced functions
				#shellcheck disable=SC2119
				swarm.eu.show.advanced
				;;
			esac
		done
	}
	#shellcheck disable=SC2120
	swarm.eu.new.menu() { #
	# Shows a basic menu wrapper for new stuff
	#
		header --default "$SWARM_MSG_WORD_MENU : $1"
		title "${SWARM_MSG_WORD_SELECT}: $SWARM_MSG_WORD_ACTION"
		local F="" S="" P=""
		F="$SWARM_MSG_WORD_FUNCTION"
		S="$SWARM_MSG_WORD_SCRIPT"
		P="${SWARM_MSG_WORD_PROJECT}"
		while item=$(pick -m "$F" "$S" "$P")
		do
			[[ "$F" == "$item" ]] && action=function
			[[ "$S" == "$item" ]] && action=script
			[[ "$P" == "$item" ]] && action=project
			[[ -z "$action" ]] && break
			swarm.eu.new.$action
			item=""
			action=""
		done
	}
	#shellcheck disable=SC2120
	swarm.eu.new.function() { #
	# As of now.. prints a function template
	#
		$CAT<<-EO_SCREEN
		func.name() { # [option] ARG
		#
		#
		 	swarm.protect "\$FUNCNAME (\${CALLER:-\$SWARM_MSG_WORD_UNKOWN})" "\${@}" && return 1
		# Variables
		 	local RET=1
		# Catch arguments
		 	while :
		 	do
		 		case "\$1" in
		 		-h|-\?|--help)
		 			builtin echo "\$SWARM_MSG_WORD_USAGE: \$FUNCNAME [ \${SWARM_MSG_WORD_OPTIONS,,} ] [ \${SWARM_MSG_WORD_ARGUMENTS^^} ]"
		 			return 0
		 			;;
		 		--)
		 			# General purpose pipe support, might need adjustment!
		 			while read line;do
		 				\${FUNCNAME[@]} "\$line"
		 			done
		 			return 0
		 			;;
		 		*)
		 			break
		 			;;
		 		esac
		 		shift
		 	done
		# Action & Display
		 	title "Something"
		 	printe "information"
		 	return \$RET
		}
		EO_SCREEN
	}
	swarm.eu.new.script() { # [-s -l -f] [NAME]
	# Without arguments this will show a selection menu for the available scripts
	# When NAME is passed from cli, it will create a new script in $SWARM_USER_DIR_SCRIPTS (eg: ~/bin)
		local item
		local newname
		if [[ -z "$1" ]]
		then	# No arguments, menu handling
			title "$SWARM_MSG_WORD_SCRIPT"
			printe "$SWARM_MSG_NEW_SCRIPT_SELECTION"
			#shellcheck disable=SC2164
			item=$(pick -m "$( cd "$SWARM_DIR_TEMPLATES/scripts/";$LS)")
			[[ "$item" == "${SWARM_MSG_WORD_BACK}" ]] && return
			newname=$(ask "$SWARM_MSG_PHRASE_NEWNAME")
			swarm.util.cp  "$SWARM_DIR_TEMPLATES/scripts/$item" "$SWARM_USER_DIR_SCRIPTS/$newname"
			chmod +x "$SWARM_USER_DIR_SCRIPTS/$newname"
			return $?
		else
			# variable prepare
			newname="${2:-${1:-$(swarm.str.genfilename newscript.sh)}}"
			case $1 in
			-l|lib)
				swarm.util.cp  "$SWARM_DIR_TEMPLATES/scripts/lib" "$SWARM_USER_DIR_SCRIPTS/${newname}"
				;;
			-s|small)
				swarm.util.cp  "$SWARM_DIR_TEMPLATES/scripts/small" "$SWARM_USER_DIR_SCRIPTS/${newname}"
				;;
			-f|full|*)
				swarm.util.cp  "$SWARM_DIR_TEMPLATES/scripts/full" "$SWARM_USER_DIR_SCRIPTS/${newname}"
				;;
			#*)
			#	break
			#	;;
			esac
			$CHMOD +x "$SWARM_USER_DIR_SCRIPTS/$newname"
			yesno "$SWARM_MSG_NEW_SCRIPT_EDITNOW" && edit "$newname"
			exit $?
		fi
	}
	swarm.eu.new.project() { # [NAME [EXEC]]
	#
	#
		local item=""
		local prj_name="" prj_exec=""
	# Simple check
		[[ -n "$1" ]] && { prj_name="$1" ; shift ; }
		[[ -n "$1" ]] && { prj_exec="$1" ; shift ; }
	# Parsing
		# No arguments, menu handling
		title "$SWARM_MSG_WORD_PROJECT"
		while [[ -z "$prj_name" ]]
		do
			prj_name=$(ask "$SWARM_MSG_NEW_PROJECT_NAME")
		done
		while [[ -z "$prj_exec" ]]
		do
			prj_exec=$(ask "$SWARM_MSG_NEW_PROJECT_EXEC")
		done
		echo "$SWARM_USER_DIR_SCRIPTS/$prj_name"
		echo "$SWARM_USER_DIR_SCRIPTS/$prj_exec"
	}
#
# Usage Handler
#
	swarm.help.usage() { # FUNCNAME
	# Returns the 'usage help screen' according to passed FUNCNAME
	#
		#shellcheck disable=SC2128
		swarm.protect "$FUNCNAME" "${@}" && exit 1
		local out=""
	# Parse argument
		case "$1" in
		"cfg.list")
			out="$SWARM_MSG_CFG_LIST_USAGE"
			;;
		"cfg.get")
			out="$SWARM_MSG_CFG_GET_USAGE"
			;;
		"cfg.set")
			out="$SWARM_MSG_CFG_SET_USAGE"
			;;
		"status")
			out="$SWARM_MSG_STATUS_USAGE"
			;;
		"printe")
			out="$SWARM_MSG_PRINTE_USAGE"
			;;
		"printl")
			out="$SWARM_MSG_PRINTL_USAGE"
			;;
		"header")
			out="$SWARM_MSG_HEADER_USAGE"
			;;
		"title")
			out="$SWARM_MSG_TITLE_USAGE"
			;;
		"yesno")
			out="$SWARM_MSG_YESNO_USAGE"
			;;
		"pick")
			out="$SWARM_MSG_PICK_USAGE"
			;;
		"printlist")
			out="$SWARM_MSG_PRINTLIST_USAGE"
			;;
		"ask")
			out="$SWARM_MSG_ASK_USAGE"
			;;
		"isDir" | "swarm.util.isDir")
			out="$SWARM_MSG_ISDIR_USAGE"
			;;
		"isRoot" | "swarm.util.isRoot")
			out="$SWARM_MSG_ISROOT_USAGE"
			;;
		"isGUI" | "swarm.util.isGUI")
			out="$SWARM_MSG_ISGUI_USAGE"
			;;
		"press")
			out="$SWARM_MSG_PRESS_USAGE"
			;;
		"DISTRO" | "swarm.os.distro" )
			out="$SWARM_MSG_DISTRO_USAGE"
			;;
		"DESKTOP" | "swarm.os.desktop")
			out="$SWARM_MSG_DESKTOP_USAGE"
			;;
		"BASED" | "swarm.os.based")
			out="$SWARM_MSG_BASED_USAGE"
			;;
		"swarm.util.tar" | "TAR")
			out="$SWARM_MSG_TAR_USAGE"
			;;
		"swarm.cleanup")
			out="$SWARM_MSG_CLEANUP_USAGE"
			;;
		"swarm.color.bg")
			out="$SWARM_MSG_COLOR_BG_USAGE"
			;;
		"swarm.color.fg")
			out="$SWARM_MSG_COLOR_FG_USAGE"
			;;
		"swarm.color.list")
			out="$SWARM_MSG_COLOR_LIST_USAGE"
			;;
		"swarm.help.usage")
			out="$SWARM_MSG_HELP_USAGE"
			;;
		"swarm.help.manpage")
			out="$SWARM_MSG_MANPAGE_USAGE"
			;;
		"swarm.print.bold")
			out="$SWARM_MSG_PRINT_BOLD_USAGE"
			;;
		"swarm.print.border")
			out="$SWARM_MSG_PRINT_BORDER_USAGE"
			;;
		"swarm.print.goto")
			out="$SWARM_MSG_PRINT_GOTO_USAGE"
			;;
		"swarm.print.text")
			out="$SWARM_MSG_PRINT_TEXT_USAGE"
			;;
		"swarm.print.underline")
			out="$SWARM_MSG_PRINT_UNDERLINE_USAGE"
			;;
		"swarm.protect")
			out="$SWARM_MSG_PROTECT_USAGE"
			;;
		"swarm.str.bool2str")
			out="$SWARM_MSG_STR_BOOL2STR_USAGE"
			;;
		"swarm.str.num2char")
			out="$SWARM_MSG_STR_NUM2CHAR_USAGE"
			;;
		"swarm.str.num2roman")
			out="$SWARM_MSG_STR_NUM2ROMAN_USAGE"
			;;
		"swarm.str.status")
			out="$SWARM_MSG_STR_STATUS_USAGE"
			;;
		"swarm.util.echo")
			out="$SWARM_MSG_ECHO_USAGE"
			;;
		"swarm.util.which")
			out="$SWARM_MSG_WHICH_USAGE"
			;;
		"filemgr")
			out="$SWARM_MSG_FILEMGR_USAGE"
			;;
		"edit")
			out="$SWARM_MSG_EDIT_USAGE"
			;;
		"web")
			out="$SWARM_MSG_WEB_USAGE"
			;;
		"rnd")
			out="$SWARM_MSG_RND_USAGE"
			;;
		"wait")
			out="$SWARM_MSG_WAIT_USAGE"
			;;
		"swarm.str.genfilename")
			out="$SWARM_MSG_STR_GENFILENAME_USAGE"
			;;
		"swarm.str.dirlist")
			out="$SWARM_MSG_STR_DIRLIST_USAGE"
			;;
		"swarm.str.dirsize")
			out="$SWARM_MSG_STR_DIRSIZE_USAGE"
			;;
		"swarm.str.filesize")
			out="$SWARM_MSG_STR_FILESIZE_USAGE"
			;;
		"swarm.str.num2ascii")
			out="$SWARM_MSG_STR_NUM2ASCII_USAGE"
			;;
		"swarm.str.ascii2num")
			out="$SWARM_MSG_STR_ASCII2NUM_USAGE"
			;;
		"swarm.util.cp")
			out="$SWARM_MSG_CP_USAGE"
			;;
		"swarm.util.mv")
			out="$SWARM_MSG_MV_USAGE"
			;;
		"download")
			out="$SWARM_MSG_DOWNLOAD_USAGE"
			;;
		"cfg.edit")
			out="$SWARM_MSG_CFG_EDIT_USAGE"
			;;
		"tar")
			out="$SWARM_MSG_TAR_USAGE"
			;;
		"bar")
			out="$SWARM_MSG_BAR_USAGE"
			;;
		"swarm.util.cd")
			out="$SWARM_MSG_CD_USAGE"
			;;
		"swarm.os.install")
			out="$SWARM_MSG_INSTALL_USAGE"
			;;
		"")
			out="$"
			;;
		"")
			out="$"
			;;
		"")
			out="$"
			;;
		*)	out="TODO: $1"
			;;
		esac
	# Output
		$PRINTF '%s\n' "$out" >&1
		unset out
	}
#
# Manpage handler
#
	swarm.help.manpage() { # FUNCNAME
	# Opens the manpage according to passed FUNCNAME
	#
		swarm.protect "${FUNCNAME[@]}" "${@}" && exit 1
		local tDir="$SWARM_DIR_LANG/${SWARM[LANG]}/man"
		if [[ -f "$1" ]]
		then	# Passed argument exists
			tManpage="$1"
		elif [[ -f "$tDir/${1}.1" ]]
		then	# default handling
			tManpage="$tDir/${1}.1"
		else	# Default error
			#shellcheck disable=SC2128
			swarm.help.usage "$FUNCNAME"
			return 1
		fi
		man "$tManpage" || status $? "$SWARM_MSG_STR_FILE_NOT_FOUND" "$1"
	}
#
# Configuration handler
#
	swarm.eu.show.config() { #
	# Shows the configuration menu for SWARM
	#
		title "$SWARM_MSG_WORD_CONFIGURE : SWARM"

		while
			printe "$SWARM_MSG_PHRASE_SELECT_FILE"
			#shellcheck disable=SC2046
			tFile=$(pick -m "RC" $(swarm.list.files "$SWARM_USER_DIR_CONF/") )
		do
			# If the selected option is 'back' quit the Loop
			[[ "$SWARM_MSG_WORD_BACK" == "$tFile" ]] && break

			# Everything else should be a valid option (if not, pick is buggy)
			case "$tFile" in
			RC)	cfg.edit "$SWARMRC"
				;;
			*)	cfg.edit "$SWARM_USER_DIR_CONF/$tFile"
				;;
			esac
		done
	}
